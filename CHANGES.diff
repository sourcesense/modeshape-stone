--- modeshape-stone/extensions/modeshape-classloader-maven/src/test/java/org/modeshape/maven/MavenIdTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-classloader-maven/src/test/java/org/modeshape/maven/MavenIdTest.java	2011-04-22 14:50:42.000000000 +0200
@@ -166,14 +166,14 @@
                                                                                                              "jdk1.4")}));
         assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4"),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4")}));
-        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4,net.jcip:jcip.annotations:1.0"), is(new MavenId[] {
-            new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"), new MavenId("net.jcip", "jcip.annotations", "1.0")}));
-        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4,,net.jcip:jcip.annotations:1.0,"),
+        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4,net.jcip:jcip-annotations:1.0"), is(new MavenId[] {
+            new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"), new MavenId("net.jcip", "jcip-annotations", "1.0")}));
+        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4,,net.jcip:jcip-annotations:1.0,"),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"),
-                       new MavenId("net.jcip", "jcip.annotations", "1.0")}));
-        assertThat(MavenId.createClasspath(",,org.modeshape:modeshape-maven:1.0:jdk1.4,, net.jcip: jcip.annotations:1.0 ,,"),
+                       new MavenId("net.jcip", "jcip-annotations", "1.0")}));
+        assertThat(MavenId.createClasspath(",,org.modeshape:modeshape-maven:1.0:jdk1.4,, net.jcip: jcip-annotations:1.0 ,,"),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"),
-                       new MavenId("net.jcip", "jcip.annotations", "1.0")}));
+                       new MavenId("net.jcip", "jcip-annotations", "1.0")}));
     }
 
     @Test
@@ -182,15 +182,15 @@
         assertThat(MavenId.createClasspath((String[])null), is(new MavenId[] {}));
         assertThat(MavenId.createClasspath(new String[] {null, null}), is(new MavenId[] {}));
 
-        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4", "net.jcip:com.springsource.net.jcip.annotations:1.0"),
+        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4", "net.jcip:jcip-annotations:1.0"),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"),
-                       new MavenId("net.jcip", "com.springsource.net.jcip.annotations", "1.0")}));
-        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4", "", "net.jcip:com.springsource.net.jcip.annotations:1.0", ""),
+                       new MavenId("net.jcip", "jcip-annotations", "1.0")}));
+        assertThat(MavenId.createClasspath("org.modeshape:modeshape-maven:1.0:jdk1.4", "", "net.jcip:jcip-annotations:1.0", ""),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"),
-                       new MavenId("net.jcip", "com.springsource.net.jcip.annotations", "1.0")}));
-        assertThat(MavenId.createClasspath(" org.modeshape:modeshape-maven:1.0:jdk1.4", " net.jcip: com.springsource.net.jcip.annotations:1.0"),
+                       new MavenId("net.jcip", "jcip-annotations", "1.0")}));
+        assertThat(MavenId.createClasspath(" org.modeshape:modeshape-maven:1.0:jdk1.4", " net.jcip: jcip-annotations:1.0"),
                    is(new MavenId[] {new MavenId("org.modeshape", "modeshape-maven", "1.0", "jdk1.4"),
-                       new MavenId("net.jcip", "com.springsource.net.jcip.annotations", "1.0")}));
+                       new MavenId("net.jcip", "jcip-annotations", "1.0")}));
     }
 
     @Test
--- modeshape-stone/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/CustomPropertiesFactory.java	2011-04-22 11:34:01.000000000 +0200
+++ modeshape/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/CustomPropertiesFactory.java	2011-04-27 12:14:47.000000000 +0200
@@ -28,7 +28,7 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
-import net.jcip.annotations.Immutable;
+import org.modeshape.common.annotation.Immutable;
 import org.modeshape.graph.ExecutionContext;
 import org.modeshape.graph.JcrLexicon;
 import org.modeshape.graph.Location;
--- modeshape-stone/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/FileSystemI18n.java	2011-04-22 11:34:01.000000000 +0200
+++ modeshape/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/FileSystemI18n.java	2011-04-27 12:14:47.000000000 +0200
@@ -64,6 +64,9 @@
     public static I18n exclusionPatternPropertyDescription;
     public static I18n exclusionPatternPropertyLabel;
     public static I18n exclusionPatternPropertyCategory;
+    public static I18n inclusionPatternPropertyDescription;
+    public static I18n inclusionPatternPropertyLabel;
+    public static I18n inclusionPatternPropertyCategory;
     public static I18n maxPathLengthPropertyDescription;
     public static I18n maxPathLengthPropertyLabel;
     public static I18n maxPathLengthPropertyCategory;
--- modeshape-stone/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/FileSystemSource.java	2011-04-22 11:34:01.000000000 +0200
+++ modeshape/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/FileSystemSource.java	2011-04-27 12:14:47.000000000 +0200
@@ -36,10 +36,10 @@
 import javax.naming.Reference;
 import javax.naming.StringRefAddr;
 import javax.naming.spi.ObjectFactory;
-import net.jcip.annotations.ThreadSafe;
 import org.modeshape.common.annotation.Category;
 import org.modeshape.common.annotation.Description;
 import org.modeshape.common.annotation.Label;
+import org.modeshape.common.annotation.ThreadSafe;
 import org.modeshape.common.i18n.I18n;
 import org.modeshape.common.util.CheckArg;
 import org.modeshape.common.util.Logger;
@@ -152,9 +152,9 @@
     @Category( i18n = FileSystemI18n.class, value = "workspaceRootPathPropertyCategory" )
     private volatile String workspaceRootPath;
 
-    @Description( i18n = FileSystemI18n.class, value = "predefinedWorkspacesPropertyDescription" )
-    @Label( i18n = FileSystemI18n.class, value = "predefinedWorkspacesPropertyLabel" )
-    @Category( i18n = FileSystemI18n.class, value = "predefinedWorkspacesPropertyCategory" )
+    @Description( i18n = FileSystemI18n.class, value = "predefinedWorkspaceNamesPropertyDescription" )
+    @Label( i18n = FileSystemI18n.class, value = "predefinedWorkspaceNamesPropertyLabel" )
+    @Category( i18n = FileSystemI18n.class, value = "predefinedWorkspaceNamesPropertyCategory" )
     private volatile String[] predefinedWorkspaces = new String[] {};
 
     @Description( i18n = FileSystemI18n.class, value = "maxPathLengthPropertyDescription" )
@@ -202,6 +202,7 @@
      * 
      * @see org.modeshape.graph.connector.RepositorySource#getCapabilities()
      */
+    @Override
     public RepositorySourceCapabilities getCapabilities() {
         return capabilities;
     }
@@ -325,8 +326,8 @@
      * @throws InstantiationException if the filename filter represents an abstract class, an interface, an array class, a
      *         primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other
      *         reason.
-     * @throws ClassCastException if the class named by {@code filenameFilterClassName} does not implement the {@code
-     *         FilenameFilter} interface
+     * @throws ClassCastException if the class named by {@code filenameFilterClassName} does not implement the
+     *         {@code FilenameFilter} interface
      */
     public synchronized void setFilenameFilter( String filenameFilterClassName )
         throws ClassCastException, ClassNotFoundException, IllegalAccessException, InstantiationException {
@@ -351,6 +352,7 @@
             filenameFilter = new FilenameFilter() {
                 Pattern filter = Pattern.compile(filterPattern);
 
+                @Override
                 public boolean accept( File dir,
                                        String name ) {
                     return !filter.matcher(name).matches();
@@ -386,8 +388,8 @@
      * <p>
      * The length of any path is calculated relative to the file system root, NOT the repository root. That is, if a workspace
      * {@code foo} is mapped to the {@code /tmp/foo/bar} directory on the file system, then the path {@code /node1/node2} in the
-     * {@code foo} workspace has an effective length of 23 for the purposes of the {@code maxPathLength} calculation ({@code
-     * /tmp/foo/bar} has length 11, {@code /node1/node2} has length 12, 11 + 12 = 23).
+     * {@code foo} workspace has an effective length of 23 for the purposes of the {@code maxPathLength} calculation (
+     * {@code /tmp/foo/bar} has length 11, {@code /node1/node2} has length 12, 11 + 12 = 23).
      * </p>
      * 
      * @param maxPathLength the maximum absolute path length supported by this source; must be non-negative
@@ -402,6 +404,7 @@
      * 
      * @return the name of the workspace that should be used by default; never null
      */
+    @Override
     public String getDefaultWorkspaceName() {
         return defaultWorkspaceName;
     }
@@ -491,6 +494,7 @@
      *        allowed.
      * @see #areUpdatesAllowed()
      */
+    @Override
     public synchronized void setUpdatesAllowed( boolean allowUpdates ) {
         capabilities = new RepositorySourceCapabilities(capabilities.supportsSameNameSiblings(), allowUpdates,
                                                         capabilities.supportsEvents(), capabilities.supportsCreatingWorkspaces(),
@@ -583,8 +587,8 @@
      * @throws InstantiationException if the custom properties factory represents an abstract class, an interface, an array class,
      *         a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other
      *         reason.
-     * @throws ClassCastException if the class named by {@code customPropertiesFactoryClassName} does not implement the {@code
-     *         CustomPropertiesFactory} interface
+     * @throws ClassCastException if the class named by {@code customPropertiesFactoryClassName} does not implement the
+     *         {@code CustomPropertiesFactory} interface
      * @see #setExtraPropertiesBehavior(String)
      */
     public synchronized void setCustomPropertiesFactory( String customPropertiesFactoryClassName )
@@ -622,6 +626,7 @@
      * 
      * @see javax.naming.Referenceable#getReference()
      */
+    @Override
     public synchronized Reference getReference() {
         String className = getClass().getName();
         String factoryClassName = this.getClass().getName();
@@ -659,6 +664,7 @@
     /**
      * {@inheritDoc}
      */
+    @Override
     public Object getObjectInstance( Object obj,
                                      javax.naming.Name name,
                                      Context nameCtx,
@@ -709,6 +715,7 @@
      * 
      * @see org.modeshape.graph.connector.RepositorySource#getConnection()
      */
+    @Override
     public synchronized RepositoryConnection getConnection() throws RepositorySourceException {
         String sourceName = getName();
         if (sourceName == null || sourceName.trim().length() == 0) {
--- modeshape-stone/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/StoreProperties.java	2011-04-22 11:34:01.000000000 +0200
+++ modeshape/extensions/modeshape-connector-filesystem/target/test/properties/org/modeshape/connector/filesystem/StoreProperties.java	2011-04-27 12:14:47.000000000 +0200
@@ -124,6 +124,7 @@
         final Pattern resourceExtensionFilter = Pattern.compile(resourceExtension.replaceAll("\\.", "\\\\.") + "$");
         return new FilenameFilter() {
 
+            @Override
             public boolean accept( File dir,
                                    String name ) {
                 if (extensionFilter.matcher(name).matches()) return false;
--- modeshape-stone/extensions/modeshape-search-lucene/src/test/java/org/modeshape/search/lucene/LuceneSearchEngineObservationTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-search-lucene/src/test/java/org/modeshape/search/lucene/LuceneSearchEngineObservationTest.java	2011-05-04 13:40:13.000000000 +0200
@@ -111,10 +111,10 @@
         sw = new Stopwatch();
 
         sourceName = "source";
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName(sourceName);
         content = Graph.create(source, context);
-        unsearchedSource = new InMemoryRepositorySource(context);
+        unsearchedSource = new InMemoryRepositorySource();
         unsearchedSource.setName(sourceName);
         unsearchedContent = Graph.create(unsearchedSource, context);
 
@@ -316,7 +316,7 @@
     @Test
     public void shouldEstimateTimeToIndexContent() {
         // Prime the reading of the files ...
-        InMemoryRepositorySource prime = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource prime = new InMemoryRepositorySource();
         prime.setName(sourceName);
         Graph primeGraph = Graph.create(prime, context);
         primeGraph.createWorkspace().named(workspaceName1);
--- modeshape-stone/extensions/modeshape-search-lucene/src/test/java/org/modeshape/search/lucene/LuceneSearchEngineTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-search-lucene/src/test/java/org/modeshape/search/lucene/LuceneSearchEngineTest.java	2011-05-04 13:40:13.000000000 +0200
@@ -100,7 +100,7 @@
         depthToRead = 10;
 
         // Set up the source and graph instance ...
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName(sourceName);
         content = Graph.create(source, context);
 
--- modeshape-stone/extensions/modeshape-sequencer-ddl/src/main/java/org/modeshape/sequencer/ddl/node/AstNode.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-sequencer-ddl/src/main/java/org/modeshape/sequencer/ddl/node/AstNode.java	2011-05-04 13:40:13.000000000 +0200
@@ -500,7 +500,7 @@
      */
     @Override
     public String toString() {
-        return getString(ExecutionContext.getDefaultContext());
+        return getString(ExecutionContext.DEFAULT_CONTEXT);
     }
 
     /**
--- modeshape-stone/extensions/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/DdlSequencerTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/DdlSequencerTest.java	2011-04-22 14:50:42.000000000 +0200
@@ -77,7 +77,7 @@
         context.getNamespaceRegistry().register(PostgresDdlLexicon.Namespace.PREFIX, PostgresDdlLexicon.Namespace.URI);
         context.getNamespaceRegistry().register(MySqlDdlLexicon.Namespace.PREFIX, MySqlDdlLexicon.Namespace.URI);
 
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("actual");
         graph = Graph.create(source, context);
 
--- modeshape-stone/extensions/modeshape-sequencer-teiid/src/main/java/org/modeshape/sequencer/teiid/CndFromEcore.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-sequencer-teiid/src/main/java/org/modeshape/sequencer/teiid/CndFromEcore.java	2011-05-04 13:40:14.000000000 +0200
@@ -185,7 +185,7 @@
             debug(TeiidI18n.readingEcoreFile, ecoreFileName);
             StringBuilder sb = new StringBuilder();
             try {
-                InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+                InMemoryRepositorySource source = new InMemoryRepositorySource();
                 source.setName(ecoreName);
                 Graph graph = Graph.create(source, context);
                 graph.importXmlFrom(ecoreFileName).into("/"); // file path or URL or even on classpath
--- modeshape-stone/extensions/modeshape-sequencer-teiid/src/test/java/org/modeshape/sequencer/teiid/XmiGraphReaderTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/extensions/modeshape-sequencer-teiid/src/test/java/org/modeshape/sequencer/teiid/XmiGraphReaderTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -51,7 +51,7 @@
     @Before
     public void beforeEach() {
         context = new ExecutionContext();
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Source");
         graph = Graph.create(source, context);
         subgraph = graph.getSubgraphOfDepth(1).at("/");
--- modeshape-stone/modeshape-cnd/src/test/java/org/modeshape/cnd/CndImporterTest.java	2011-04-21 12:47:08.000000000 +0200
+++ modeshape/modeshape-cnd/src/test/java/org/modeshape/cnd/CndImporterTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -77,7 +77,7 @@
         context.getNamespaceRegistry().register(JcrNtLexicon.Namespace.PREFIX, JcrNtLexicon.Namespace.URI);
 
         // Set up the repository and graph ...
-        repository = new InMemoryRepositorySource(context);
+        repository = new InMemoryRepositorySource();
         repository.setName("NodeTypes");
         graph = Graph.create(repository, context);
 
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/component/ComponentLibrary.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/component/ComponentLibrary.java	2011-05-04 13:40:14.000000000 +0200
@@ -24,7 +24,6 @@
 
 package org.modeshape.common.component;
 
-import java.lang.reflect.Constructor;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -340,13 +339,8 @@
      */
     @SuppressWarnings( "unchecked" )
     protected ComponentType doCreateInstance( Class<?> componentClass ) throws InstantiationException, IllegalAccessException {
-        try {
-            Constructor<?> constructor = componentClass.getConstructor(ClassLoaderFactory.class);
-            return (ComponentType)constructor.newInstance(getClassLoaderFactory());
-        } catch (Exception exception) {
             return (ComponentType)componentClass.newInstance();
         }
-    }
 
     /**
      * Find the index for the matching {@link #configs configuration} and {@link #instances component}.
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/naming/SingletonInitialContext.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/naming/SingletonInitialContext.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,300 +0,0 @@
-/*
- * ModeShape (http://www.modeshape.org)
- * See the COPYRIGHT.txt file distributed with this work for information
- * regarding copyright ownership.  Some portions may be licensed
- * to Red Hat, Inc. under one or more contributor license agreements.
- * See the AUTHORS.txt file in the distribution for a full listing of 
- * individual contributors. 
- *
- * ModeShape is free software. Unless otherwise indicated, all code in ModeShape
- * is licensed to you under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * ModeShape is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-
-package org.modeshape.common.naming;
-
-import java.util.Hashtable;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-import javax.naming.Binding;
-import javax.naming.Context;
-import javax.naming.Name;
-import javax.naming.NameAlreadyBoundException;
-import javax.naming.NameClassPair;
-import javax.naming.NameNotFoundException;
-import javax.naming.NameParser;
-import javax.naming.NamingEnumeration;
-import javax.naming.NamingException;
-
-import org.modeshape.common.SystemFailureException;
-
-/**
- * A simple and limited JNDI implementation that can be used in unit tests for code that {@link Context#lookup(String) looks up}
- * objects.
- * 
- * @author Luca Stancapiano
- */
-public class SingletonInitialContext implements Context {
-
-    public static void setup() {
-        System.setProperty("java.naming.factory.initial", SingletonInitialContextFactory.class.getName());
-    }
-
-    public static void register( String name, Object obj ) {
-        register(name, obj, null, null, null, null);
-    }
-
-    public static void register( String name1, Object obj1, String name2, Object obj2 ) {
-        register(name1, obj1, name2, obj2, null, null);
-    }
-
-    public static void register( String name1, Object obj1, String name2, Object obj2, String name3, Object obj3 ) {
-        setup();
-        try {
-            javax.naming.InitialContext context = new javax.naming.InitialContext();
-            if (name1 != null) context.rebind(name1, obj1);
-            if (name2 != null) context.rebind(name2, obj2);
-            if (name3 != null) context.rebind(name3, obj3);
-        } catch (NamingException e) {
-            throw new SystemFailureException("Unable to create the mock InitialContext", e);
-        }
-    }
-
-    public static void tearDown() {
-    	SingletonInitialContextFactory.tearDown();
-    }
-
-    private final Map<String, Object> environment = new ConcurrentHashMap<String, Object>();
-    private final ConcurrentHashMap<String, Object> registry = new ConcurrentHashMap<String, Object>();
-
-    /* package */SingletonInitialContext( Hashtable<?, ?> environment ) {
-        for (Map.Entry<?, ?> entry : environment.entrySet()) {
-            this.environment.put(entry.getKey().toString(), entry.getValue());
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object addToEnvironment( String propName, Object propVal ) {
-        return environment.put(propName, propVal);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object removeFromEnvironment( String propName ) {
-        return environment.remove(propName);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void bind( Name name, Object obj ) throws NamingException {
-        bind(name.toString(), obj);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void bind( String name, Object obj ) throws NamingException {
-        if (this.registry.putIfAbsent(name, obj) != null) {
-            throw new NameAlreadyBoundException("The name \"" + name + "\" is already bound to an object");
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void rebind( Name name, Object obj ) {
-        rebind(name.toString(), obj);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void rebind( String name, Object obj ) {
-        this.registry.put(name, obj);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void unbind( String name ) {
-        this.registry.remove(name);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void unbind( Name name ) {
-        unbind(name.toString());
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object lookup( Name name ) throws NamingException {
-        return lookup(name.toString());
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object lookup( String name ) throws NamingException {
-        Object result = this.registry.get(name);
-        if (result == null) {
-            throw new NameNotFoundException("No object is registered at \"" + name + "\"");
-        }
-        return result;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object lookupLink( String name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Object lookupLink( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void rename( Name oldName, Name newName ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void rename( String oldName, String newName ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void close() {
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Name composeName( Name name, Name prefix ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String composeName( String name, String prefix ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Context createSubcontext( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Context createSubcontext( String name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void destroySubcontext( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void destroySubcontext( String name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Hashtable<?, ?> getEnvironment() {
-    	Hashtable<String, String> hashtable = new Hashtable<String, String>();
-    	Map<?, ?> map = this.environment;
-    	for (Map.Entry<?, ?> dd : map.entrySet()) {
-    		hashtable.put(dd.getKey().toString(), dd.getValue().toString());
-    	}
-        return hashtable;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String getNameInNamespace() {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NameParser getNameParser( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NameParser getNameParser( String name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NamingEnumeration<NameClassPair> list( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NamingEnumeration<NameClassPair> list( String name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NamingEnumeration<Binding> listBindings( Name name ) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public NamingEnumeration<Binding> listBindings( String name ) {
-        throw new UnsupportedOperationException();
-    }
-}
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/naming/SingletonInitialContextFactory.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/naming/SingletonInitialContextFactory.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-/*
- * ModeShape (http://www.modeshape.org)
- * See the COPYRIGHT.txt file distributed with this work for information
- * regarding copyright ownership.  Some portions may be licensed
- * to Red Hat, Inc. under one or more contributor license agreements.
- * See the AUTHORS.txt file in the distribution for a full listing of 
- * individual contributors. 
- *
- * ModeShape is free software. Unless otherwise indicated, all code in ModeShape
- * is licensed to you under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * ModeShape is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-
-package org.modeshape.common.naming;
-
-import java.util.Hashtable;
-import javax.naming.Context;
-import javax.naming.spi.InitialContextFactory;
-
-/**
- * The factory for a simple and limited JNDI implementation that can be used in unit tests for code that
- * {@link Context#lookup(String) looks up} objects. See {@link SingletonInitialContext} for how to use this implementation.
- * @author Luca Stancapiano
- */
-public class SingletonInitialContextFactory implements InitialContextFactory {
-
-    private static SingletonInitialContext SINGLETON;
-
-    /**
-     * {@inheritDoc}
-     */
-    public Context getInitialContext( Hashtable<?, ?> environment ) {
-        return getInstance(environment);
-    }
-
-    public static synchronized SingletonInitialContext getInstance( Hashtable<?, ?> environment ) {
-        if (SINGLETON == null) SINGLETON = new SingletonInitialContext(environment);
-        return SINGLETON;
-
-    }
-
-    public static synchronized void tearDown() {
-        SINGLETON = null;
-    }
-}
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/text/Position.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/text/Position.java	2011-05-04 13:40:14.000000000 +0200
@@ -77,24 +77,6 @@
         return "" + indexInContent + ':' + line + ':' + column;
     }
 
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        Position other = (Position) obj;
-        if (column != other.column)
-            return false;
-        if (indexInContent != other.indexInContent)
-            return false;
-        if (line != other.line)
-            return false;
-        return true;
-    }
-
     /**
      * Return a new position that is the addition of this position and that supplied.
      * 
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/text/TokenStream.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/text/TokenStream.java	2011-05-04 13:40:14.000000000 +0200
@@ -1249,24 +1249,6 @@
         return sb.toString();
     }
 
-    private Token save;
-
-    public void saveState() {
-        this.save = currentToken;
-    }
-
-    public void regenerate() {
-        if (completed) {
-            completed = false;
-        }
-        while (!this.save.equals(this.currentToken)) {
-            currentToken = tokenIterator.previous();
-        }
-        //WORKAROUND BECAUS PREVIUS METHOD NOT WORK PROPERTY
-        currentToken = tokenIterator.next();
-        this.save = null;
-    }
-
     private void moveToNextToken() {
         // And move the currentToken to the next token ...
         if (!tokenIterator.hasNext()) {
--- modeshape-stone/modeshape-common/src/main/java/org/modeshape/common/util/MimeTypeUtil.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/main/java/org/modeshape/common/util/MimeTypeUtil.java	2011-05-04 13:40:14.000000000 +0200
@@ -36,7 +36,6 @@
 import java.util.regex.Pattern;
 import net.jcip.annotations.Immutable;
 import org.modeshape.common.CommonI18n;
-import org.modeshape.common.component.ClassLoaderFactory;
 import org.modeshape.common.i18n.I18n;
 
 /**
@@ -71,10 +70,6 @@
         this(null, true);
     }
     
-    public MimeTypeUtil( ClassLoaderFactory classLoaderFactory ) {
-        this(null, true, classLoaderFactory.getClassLoader(new String[]{}));
-    }
-
     /**
      * Create an instance of the extension-based MIME type detector by using the supplied mappings. The set of extension patterns
      * to MIME-types is loaded from the "org/modeshape/mime.types" classpath resource, but the supplied extension mappings
@@ -84,7 +79,7 @@
      *        be null if the default mappings are to be used
      */
     public MimeTypeUtil( Map<String, String> extensionsToMimeTypes ) {
-        this(extensionsToMimeTypes, true, Thread.currentThread().getContextClassLoader());
+        this(extensionsToMimeTypes, true);
     }
 
 	/**
@@ -99,23 +94,7 @@
      */
     public MimeTypeUtil( Map<String, String> extensionsToMimeTypes,
                          boolean initWithDefaults ) {
-        this(extensionsToMimeTypes, initWithDefaults, Thread.currentThread().getContextClassLoader());
-    }
-    
-    /**
-     * Create an instance of the extension-based MIME type detector by using the supplied mappings. If requested, the set of
-     * extension patterns to MIME-types is loaded from the "org/modeshape/mime.types" classpath resource and any supplied
-     * extension mappings override any default mappings.
-     * 
-     * @param extensionsToMimeTypes the mapping of extension patterns to MIME types, which will override the default mappings; may
-     *        be null if the default mappings are to be used
-     * @param initWithDefaults true if the default mappings are to be loaded first, or false if the default mappings are not to be
-     *        used at all
-     * @param classLoader the class loader to look for the resource file resolution
-     */
-    public MimeTypeUtil( Map<String, String> extensionsToMimeTypes,
-                         boolean initWithDefaults, ClassLoader classLoader) {
-        Map<String, String> mappings = initWithDefaults ? getMappingsWith(classLoader) : new HashMap<String, String>();
+        Map<String, String> mappings = initWithDefaults ? getDefaultMappings() : new HashMap<String, String>();
         if (extensionsToMimeTypes != null) {
             for (Map.Entry<String, String> entry : extensionsToMimeTypes.entrySet()) {
                 String extensionString = entry.getKey();
@@ -154,12 +133,8 @@
      * @return the default mappings; never null
      */
     protected static Map<String, String> getDefaultMappings() {
-		return getMappingsWith(Thread.currentThread().getContextClassLoader());
-    }
-
-	protected static Map<String, String> getMappingsWith( ClassLoader classLoader ) {
         Map<String, Set<String>> duplicates = new HashMap<String, Set<String>>();
-        return load(classLoader.getResourceAsStream(MIME_TYPE_EXTENSIONS_RESOURCE_PATH),
+        return load(Thread.currentThread().getContextClassLoader().getResourceAsStream(MIME_TYPE_EXTENSIONS_RESOURCE_PATH),
                     duplicates);
     }
     
--- modeshape-stone/modeshape-common/src/test/java/org/modeshape/common/naming/MockInitialContextTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-common/src/test/java/org/modeshape/common/naming/MockInitialContextTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -49,12 +49,12 @@
 
     @After
     public void afterEach() {
-        SingletonInitialContext.tearDown();
+        MockInitialContext.tearDown();
     }
 
     @Test
     public void shouldCreateInitialContextAndRegisterAnObject() throws Exception {
-    	SingletonInitialContext.register(this.validName, this.registeredObject);
+        MockInitialContext.register(this.validName, this.registeredObject);
         for (int i = 0; i != 10; ++i) {
             assertThat(new InitialContext().lookup(this.validName), is(sameInstance(this.registeredObject)));
         }
@@ -64,12 +64,12 @@
     public void shouldTearDownMockInitialContextUponRequest() throws Exception {
         // Set it up ...
         // (Don't want to use 'expected', since the NamingException could be thrown here and we wouldn't know the difference)
-    	SingletonInitialContext.register(this.validName, this.registeredObject);
+        MockInitialContext.register(this.validName, this.registeredObject);
         for (int i = 0; i != 10; ++i) {
             assertThat(new InitialContext().lookup(this.validName), is(sameInstance(this.registeredObject)));
         }
         // Tear it down ...
-        SingletonInitialContext.tearDown();
+        MockInitialContext.tearDown();
         try {
             new InitialContext().lookup(this.validName);
             throw new AssertionFailedError("Failed to throw exception");
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/connector/inmemory/InMemoryRepositorySource.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/connector/inmemory/InMemoryRepositorySource.java	2011-05-04 13:40:14.000000000 +0200
@@ -134,13 +134,10 @@
 
     private CachePolicy defaultCachePolicy;
     private transient InMemoryRepository repository;
-    private transient ExecutionContext defaultContext;
+    private transient ExecutionContext defaultContext = new ExecutionContext();
     private transient RepositoryContext repositoryContext = new DefaultRepositoryContext();
 
-	
     protected class DefaultRepositoryContext implements RepositoryContext {
-    
-        
         /**
          * {@inheritDoc}
          * 
@@ -182,13 +179,8 @@
     /**
      * Create a repository source instance.
      */
-//    public InMemoryRepositorySource() {
-//        this(new ExecutionContext());
-//    }
-    
-    public InMemoryRepositorySource(ExecutionContext defaultContext) {
+    public InMemoryRepositorySource() {
         super();
-        this.defaultContext = defaultContext;
     }
 
     /**
@@ -472,7 +464,7 @@
             }
 
             // Create the source instance ...
-            InMemoryRepositorySource source = new InMemoryRepositorySource(defaultContext);
+            InMemoryRepositorySource source = new InMemoryRepositorySource();
             if (sourceName != null) source.setName(sourceName);
             if (rootNodeUuidString != null) source.setRootNodeUuid(UUID.fromString(rootNodeUuidString));
             if (defaultWorkspaceName != null) source.setDefaultWorkspaceName(defaultWorkspaceName);
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/connector/xmlfile/XmlFileRepositorySource.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/connector/xmlfile/XmlFileRepositorySource.java	2011-05-04 13:40:14.000000000 +0200
@@ -252,7 +252,7 @@
     public synchronized RepositoryConnection getConnection() throws RepositorySourceException {
         if (inMemorySource == null) {
             // Initialize the source and load the content ...
-            inMemorySource = new InMemoryRepositorySource(defaultContext);
+            inMemorySource = new InMemoryRepositorySource();
             inMemorySource.setName(name);
 
             if (content != null && content.length() != 0) {
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/ExecutionContext.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/ExecutionContext.java	2011-05-04 13:40:14.000000000 +0200
@@ -61,7 +61,7 @@
 @Immutable
 public class ExecutionContext implements ClassLoaderFactory, Cloneable {
 
-//    public static final ExecutionContext DEFAULT_CONTEXT = new ExecutionContext();
+    public static final ExecutionContext DEFAULT_CONTEXT = new ExecutionContext();
 
     private final ClassLoaderFactory classLoaderFactory;
     private final PropertyFactory propertyFactory;
@@ -164,7 +164,7 @@
     }
 
     private MimeTypeDetector createDefaultMimeTypeDetector() {
-        MimeTypeDetectors detectors = new MimeTypeDetectors(getClassLoaderFactory());
+        MimeTypeDetectors detectors = new MimeTypeDetectors();
         detectors.addDetector(ExtensionBasedMimeTypeDetector.CONFIGURATION);
         return detectors;
     }
@@ -174,7 +174,7 @@
      * 
      * @return the class loader factory implementation; never null
      */
-    public ClassLoaderFactory getClassLoaderFactory() {
+    protected ClassLoaderFactory getClassLoaderFactory() {
         return classLoaderFactory;
     }
 
@@ -469,8 +469,4 @@
         }
 
     }
-
-    public static ExecutionContext getDefaultContext() {
-        return new ExecutionContext();
-    }
 }
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/Graph.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/Graph.java	2011-05-04 13:40:14.000000000 +0200
@@ -193,7 +193,7 @@
      * @throws IllegalArgumentException if the context parameter is null
      */
     public static Graph create( ExecutionContext context ) {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Transient source");
         return create(source, context);
     }
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/mimetype/ExtensionBasedMimeTypeDetector.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/mimetype/ExtensionBasedMimeTypeDetector.java	2011-05-04 13:40:14.000000000 +0200
@@ -26,7 +26,6 @@
 import java.io.InputStream;
 import java.util.Map;
 import net.jcip.annotations.Immutable;
-import org.modeshape.common.component.ClassLoaderFactory;
 import org.modeshape.common.util.MimeTypeUtil;
 
 /**
@@ -52,10 +51,6 @@
         super();
     }
 
-	public ExtensionBasedMimeTypeDetector(ClassLoaderFactory classLoaderFactory) {
-        super(classLoaderFactory);
-    }
-    
     /**
      * Create an instance of the extension-based MIME type detector by using the supplied mappings. The set of extension patterns
      * to MIME-types is loaded from the "{@link MimeTypeUtil#MIME_TYPE_EXTENSIONS_RESOURCE_PATH org/modeshape/mime.types}"
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/mimetype/MimeTypeDetectors.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/mimetype/MimeTypeDetectors.java	2011-05-04 13:40:14.000000000 +0200
@@ -50,12 +50,8 @@
     private Logger logger;
 
     public MimeTypeDetectors() {
-        this(DEFAULT_CLASSLOADER_FACTORY);
-    }
-
-    public MimeTypeDetectors(ClassLoaderFactory classLoaderFactory) {
         library = new ComponentLibrary<MimeTypeDetector, MimeTypeDetectorConfig>(true);
-        library.setClassLoaderFactory(classLoaderFactory);        
+        library.setClassLoaderFactory(DEFAULT_CLASSLOADER_FACTORY);
     }
     
     /**
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/model/Query.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/model/Query.java	2011-05-04 13:40:14.000000000 +0200
@@ -46,7 +46,6 @@
     private final Source source;
     private final Constraint constraint;
     private final List<? extends Column> columns;
-    private final List<? extends Column> orderingColumns;
     private final boolean distinct;
     private final int hc;
 
@@ -64,7 +63,6 @@
         this.source = source;
         this.constraint = null;
         this.columns = Collections.<Column>emptyList();
-        this.orderingColumns = Collections.<Column>emptyList();
         this.distinct = IS_DISTINCT_DEFAULT;
         this.hc = HashCode.compute(this.source, this.constraint, this.columns, this.distinct);
     }
@@ -86,37 +84,18 @@
                   Constraint constraint,
                   List<? extends Ordering> orderings,
                   List<? extends Column> columns,
-                  List<? extends Column> orderingColumns,
                   Limit limit,
                   boolean isDistinct ) {
         CheckArg.isNotNull(source, "source");
         this.source = source;
         this.constraint = constraint;
         this.columns = columns != null ? columns : Collections.<Column>emptyList();
-        this.orderingColumns = orderingColumns != null ? orderingColumns : Collections.<Column>emptyList();
         this.distinct = isDistinct;
         this.orderings = orderings != null ? orderings : Collections.<Ordering>emptyList();
         this.limits = limit != null ? limit : Limit.NONE;
         this.hc = HashCode.compute(this.source, this.constraint, this.columns, this.distinct);
     }
     
-    public Query( Source source,
-            Constraint constraint,
-            List<? extends Ordering> orderings,
-            List<? extends Column> columns,
-            Limit limit,
-            boolean isDistinct ) {
-  CheckArg.isNotNull(source, "source");
-  this.source = source;
-  this.constraint = constraint;
-  this.columns = columns != null ? columns : Collections.<Column>emptyList();
-  this.orderingColumns = Collections.<Column>emptyList();
-  this.distinct = isDistinct;
-  this.orderings = orderings != null ? orderings : Collections.<Ordering>emptyList();
-  this.limits = limit != null ? limit : Limit.NONE;
-  this.hc = HashCode.compute(this.source, this.constraint, this.columns, this.distinct);
-}
-
     /**
      * {@inheritDoc}
      * 
@@ -162,10 +141,6 @@
         return columns;
     }
     
-    public List<? extends Column> orderingColumns() {
-        return orderingColumns;
-    }
-
     /**
      * Determine whether this query is to return only distinct values.
      * 
@@ -181,7 +156,7 @@
      * @return the copy of the query with no duplicate result rows; never null
      */
     public Query distinct() {
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits(), true);
+        return new Query(source, constraint, orderings(), columns, limits(), true);
     }
 
     /**
@@ -190,7 +165,7 @@
      * @return the copy of the query with potentially duplicate result rows; never null
      */
     public Query noDistinct() {
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits(), false);
+        return new Query(source, constraint, orderings(), columns, limits(), false);
     }
 
     /**
@@ -200,7 +175,7 @@
      * @return the copy of the query that uses the supplied constraint; never null
      */
     public Query constrainedBy( Constraint constraint ) {
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits(), distinct);
+        return new Query(source, constraint, orderings(), columns, limits(), distinct);
     }
 
     /**
@@ -210,7 +185,7 @@
      * @return the copy of the query that uses the supplied ordering; never null
      */
     public Query orderedBy( List<Ordering> orderings ) {
-        return new Query(source, constraint, orderings, columns, orderingColumns, limits(), distinct);
+        return new Query(source, constraint, orderings, columns, limits(), distinct);
     }
 
     /**
@@ -220,7 +195,7 @@
      */
     public Query withLimit( int rowLimit ) {
         if (limits().rowLimit() == rowLimit) return this; // nothing to change
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits().withRowLimit(rowLimit), distinct);
+        return new Query(source, constraint, orderings(), columns, limits().withRowLimit(rowLimit), distinct);
     }
 
     /**
@@ -230,7 +205,7 @@
      */
     public Query withOffset( int offset ) {
         if (limits().offset() == offset) return this; // nothing to change
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits().withOffset(offset), distinct);
+        return new Query(source, constraint, orderings(), columns, limits().withOffset(offset), distinct);
     }
 
     /**
@@ -240,7 +215,7 @@
      * @return the copy of the query returning the supplied result columns; never null
      */
     public Query returning( List<Column> columns ) {
-        return new Query(source, constraint, orderings(), columns, orderingColumns, limits(), distinct);
+        return new Query(source, constraint, orderings(), columns, limits(), distinct);
     }
 
     /**
@@ -260,7 +235,7 @@
         } else {
             newOrderings = Arrays.asList(orderings);
         }
-        return new Query(source, constraint, newOrderings, columns, orderingColumns, limits(), distinct);
+        return new Query(source, constraint, newOrderings, columns, limits(), distinct);
     }
 
     /**
@@ -280,7 +255,7 @@
         } else {
             newColumns = Arrays.asList(columns);
         }
-        return new Query(source, constraint, orderings(), newColumns, orderingColumns, limits(), distinct);
+        return new Query(source, constraint, orderings(), newColumns, limits(), distinct);
     }
 
     /**
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/parse/SqlQueryParser.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/parse/SqlQueryParser.java	2011-04-22 14:50:43.000000000 +0200
@@ -56,7 +54,6 @@
 import org.modeshape.graph.query.model.DynamicOperand;
 import org.modeshape.graph.query.model.EquiJoinCondition;
 import org.modeshape.graph.query.model.FullTextSearch;
-import org.modeshape.graph.query.model.FullTextSearch.Term;
 import org.modeshape.graph.query.model.FullTextSearchScore;
 import org.modeshape.graph.query.model.Join;
 import org.modeshape.graph.query.model.JoinCondition;
@@ -86,13 +83,14 @@
 import org.modeshape.graph.query.model.SelectorName;
 import org.modeshape.graph.query.model.SetCriteria;
 import org.modeshape.graph.query.model.SetQuery;
-import org.modeshape.graph.query.model.SetQuery.Operation;
 import org.modeshape.graph.query.model.Source;
 import org.modeshape.graph.query.model.StaticOperand;
 import org.modeshape.graph.query.model.Subquery;
 import org.modeshape.graph.query.model.TypeSystem;
-import org.modeshape.graph.query.model.TypeSystem.TypeFactory;
 import org.modeshape.graph.query.model.UpperCase;
+import org.modeshape.graph.query.model.FullTextSearch.Term;
+import org.modeshape.graph.query.model.SetQuery.Operation;
+import org.modeshape.graph.query.model.TypeSystem.TypeFactory;
 
 /**
  * A {@link QueryParser} implementation that parses a subset of SQL select and set queries.
@@ -539,22 +537,12 @@
         Source source = parseFrom(tokens, typeSystem);
         Constraint constraint = parseWhere(tokens, typeSystem, source);
         // Parse the order by and limit (can be in any order) ...
-        List<ColumnExpression> orderingColumnExpression = new ArrayList<ColumnExpression>();
-        List<? extends Ordering> orderings = parseOrderBy(tokens, typeSystem, source, orderingColumnExpression);
+        List<? extends Ordering> orderings = parseOrderBy(tokens, typeSystem, source);
         Limit limit = parseLimit(tokens);
-        if (orderings == null) parseOrderBy(tokens, typeSystem, source,columnExpressions);
+        if (orderings == null) parseOrderBy(tokens, typeSystem, source);
 
         // Convert the column expressions to columns ...
         List<Column> columns = new ArrayList<Column>(columnExpressions.size());
-        fillColumns(columnExpressions, source, columns);
-        List<Column> orderingColumns = new ArrayList<Column>(orderingColumnExpression.size());
-        fillColumns(orderingColumnExpression, source, orderingColumns);
-        // Now create the query ...
-        return query(source, constraint, orderings, columns, orderingColumns, limit, isDistinct.get());
-    }
-
-    private void fillColumns(List<ColumnExpression> columnExpressions,
-            Source source, List<Column> columns) {
         for (ColumnExpression expression : columnExpressions) {
             SelectorName selectorName = expression.getSelectorName();
             String propertyName = expression.getPropertyName();
@@ -569,6 +557,8 @@
             }
             columns.add(column(selectorName, propertyName, expression.getColumnName()));
         }
+        // Now create the query ...
+        return query(source, constraint, orderings, columns, limit, isDistinct.get());
     }
 
     protected SetQuery parseSetQuery( TokenStream tokens,
@@ -867,17 +857,10 @@
         String msg = GraphI18n.expectingComparisonOperator.text(tokens.consume(), pos.getLine(), pos.getColumn());
         throw new ParsingException(pos, msg);
     }
-    protected List<Ordering> parseOrderBy( TokenStream tokens,
-            TypeSystem typeSystem,
-            Source source, 
-            List<ColumnExpression> columnExpressions ) {
-        columnExpressions.addAll(parseOrderingColumn(tokens, new AtomicBoolean(false), typeSystem));
-        return parseOrderBy(tokens, typeSystem, source);
-    }
 
     protected List<Ordering> parseOrderBy( TokenStream tokens,
                                            TypeSystem typeSystem,
-                                           Source source) {
+                                           Source source ) {
         if (tokens.canConsume("ORDER", "BY")) {
             List<Ordering> orderings = new ArrayList<Ordering>();
             do {
@@ -888,29 +871,6 @@
         return null;
     }
 
-    private Collection<? extends ColumnExpression> parseOrderingColumn(
-            TokenStream tokens, AtomicBoolean atomicBoolean,
-            TypeSystem typeSystem) {
-        List<ColumnExpression> columns = new ArrayList<ColumnExpression>();
-        tokens.saveState();
-        if (tokens.canConsume("ORDER", "BY")) {
-            do {
-                Position position = tokens.nextPosition();
-                String propertyName = parseName(tokens, typeSystem);
-                SelectorName selectorName = null;
-                if (tokens.canConsume('.')) {
-                    // We actually read the selector name, so now read the property name ...
-                    selectorName = new SelectorName(propertyName);
-                    propertyName = parseName(tokens, typeSystem);
-                }
-                String alias = propertyName;
-                columns.add(new ColumnExpression(selectorName, propertyName, alias, position));
-            } while (tokens.canConsume(','));
-            tokens.regenerate();
-        }
-        return columns;
-    }
-
     protected Ordering parseOrdering( TokenStream tokens,
                                       TypeSystem typeSystem,
                                       Source source ) {
@@ -1390,10 +1350,9 @@
                            Constraint constraint,
                            List<? extends Ordering> orderings,
                            List<? extends Column> columns,
-                           List<? extends Column> orderingColumns,
                            Limit limit,
                            boolean distinct ) {
-        return new Query(source, constraint, orderings, columns, orderingColumns, limit, distinct);
+        return new Query(source, constraint, orderings, columns, limit, distinct);
     }
 
     protected SetQuery setQuery( QueryCommand leftQuery,
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/plan/CanonicalPlanner.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/plan/CanonicalPlanner.java	2011-04-22 14:50:43.000000000 +0200
@@ -136,7 +136,7 @@
         // plan = attachGrouping(context,plan,query.getGroupBy());
 
         // Attach the project ...
-        plan = attachProject(context, plan, query, usedSources);
+        plan = attachProject(context, plan, query.columns(), usedSources);
 
         // Attach duplicate removal ...
         if (query.isDistinct()) {
@@ -420,13 +420,12 @@
      */
     protected PlanNode attachProject( QueryContext context,
                                       PlanNode plan,
-                                      Query query,
+                                      List<? extends Column> columns,
                                       Map<SelectorName, Table> selectors ) {
         PlanNode projectNode = new PlanNode(Type.PROJECT);
-        List<Column> columns = (List<Column>) query.columns();
+
         List<Column> newColumns = new LinkedList<Column>();
         List<String> newTypes = new ArrayList<String>();
-        List<String> orderingTypes = new ArrayList<String>();
         if (columns == null || columns.isEmpty()) {
             // SELECT *, so find all of the columns that are available from all the sources ...
             for (Map.Entry<SelectorName, Table> entry : selectors.entrySet()) {
@@ -466,15 +465,6 @@
                             }
                         }
                     }
-                    for (Column col : query.orderingColumns()) {
-                        String colName = col.propertyName();
-                        org.modeshape.graph.query.validate.Schemata.Column schemaColumn = table.getColumn(colName);
-                        if (schemaColumn != null) {
-                            orderingTypes.add(schemaColumn.getPropertyType());
-                        } else {
-                            orderingTypes.add(context.getTypeSystem().getStringFactory().getTypeName());
-                        }
-                    }
                     boolean validateColumnExistance = context.getHints().validateColumnExistance && !table.hasExtraColumns();
                     if (table.getColumn(columnName) == null && validateColumnExistance && !"*".equals(columnName)) {
                         context.getProblems().addError(GraphI18n.columnDoesNotExistOnTable, columnName, tableName);
@@ -484,10 +474,6 @@
         }
         projectNode.setProperty(Property.PROJECT_COLUMNS, newColumns);
         projectNode.setProperty(Property.PROJECT_COLUMN_TYPES, newTypes);
-        if (!query.orderingColumns().isEmpty()) {
-            projectNode.setProperty(Property.ORDERING_COLUMNS, query.orderingColumns());
-            projectNode.setProperty(Property.ORDERING_COLUMNS_TYPE, orderingTypes);
-        }
         projectNode.addLastChild(plan);
         return projectNode;
     }
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/plan/PlanNode.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/plan/PlanNode.java	2011-05-04 13:40:14.000000000 +0200
@@ -144,10 +144,6 @@
         /** For SELECT nodes, the criteria object that is to be applied. Value is a {@link Constraint} object. */
         SELECT_CRITERIA,
         
-        ORDERING_COLUMNS,
-        
-        ORDERING_COLUMNS_TYPE,
-
         /** For SET_OPERATION nodes, the type of set operation to be performed. Value is a {@link Operation} object. */
         SET_OPERATION,
         /** For SET_OPERATION nodes, whether the 'all' clause is used. Value is a {@link Boolean} object. */
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/process/ProcessingComponent.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/process/ProcessingComponent.java	2011-05-04 13:40:14.000000000 +0200
@@ -142,14 +142,12 @@
      * @param typeSystem the type system; may not be null
      * @param schemata the schemata; may not be null
      * @param columns the definition of the result columns and the tuples; may not be null
-     * @param orderingColumns 
      * @param operand the dynamic operand that is to be evaluated by the returned object; may not be null
      * @return the dynamic operand operation; never null
      */
     protected DynamicOperation createDynamicOperation( final TypeSystem typeSystem,
                                                        Schemata schemata,
                                                        Columns columns,
-                                                       Columns orderingColumns,
                                                        DynamicOperand operand ) {
         assert operand != null;
         assert columns != null;
@@ -157,10 +155,9 @@
             PropertyValue propValue = (PropertyValue)operand;
             String propertyName = propValue.propertyName();
             String selectorName = propValue.selectorName().name();
-            final int index = getIndex(orderingColumns,columns, propertyName,
-                    selectorName);
+            final int index = columns.getColumnIndexForProperty(selectorName, propertyName);
             // Find the expected property type of the value ...
-            final String expectedType = getExpectedType(orderingColumns, columns, index);
+            final String expectedType = columns.getColumnTypes().get(index);
             final TypeFactory<?> typeFactory = typeSystem.getTypeFactory(expectedType);
             return new DynamicOperation() {
                 public String getExpectedType() {
@@ -176,9 +173,9 @@
             ReferenceValue refValue = (ReferenceValue)operand;
             String propertyName = refValue.propertyName();
             String selectorName = refValue.selectorName().name();
-            final int index = getIndex(orderingColumns,columns, propertyName,
-                    selectorName);
-            final String expectedType = getExpectedType(orderingColumns, columns, index);
+            final int index = columns.getColumnIndexForProperty(selectorName, propertyName);
+            // Find the expected property type of the value ...
+            final String expectedType = columns.getColumnTypes().get(index);
             final TypeFactory<?> typeFactory = typeSystem.getTypeFactory(expectedType);
             return new DynamicOperation() {
                 public String getExpectedType() {
@@ -196,9 +193,9 @@
             PropertyValue value = length.propertyValue();
             String propertyName = value.propertyName();
             String selectorName = value.selectorName().name();
-            final int index = getIndex(orderingColumns,columns, propertyName,
-                    selectorName);
-            final String expectedType = getExpectedType(orderingColumns,columns, index);
+            final int index = columns.getColumnIndexForProperty(selectorName, propertyName);
+            // Find the expected property type of the value ...
+            final String expectedType = columns.getColumnTypes().get(index);
             final TypeFactory<?> typeFactory = typeSystem.getTypeFactory(expectedType);
             final TypeFactory<Long> longFactory = typeSystem.getLongFactory();
             return new DynamicOperation() {
@@ -214,7 +211,7 @@
         }
         if (operand instanceof LowerCase) {
             LowerCase lowerCase = (LowerCase)operand;
-            final DynamicOperation delegate = createDynamicOperation(typeSystem, schemata, columns,orderingColumns, lowerCase.operand());
+            final DynamicOperation delegate = createDynamicOperation(typeSystem, schemata, columns, lowerCase.operand());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return stringFactory.getTypeName();
@@ -228,7 +225,7 @@
         }
         if (operand instanceof UpperCase) {
             UpperCase upperCase = (UpperCase)operand;
-            final DynamicOperation delegate = createDynamicOperation(typeSystem, schemata, columns,orderingColumns, upperCase.operand());
+            final DynamicOperation delegate = createDynamicOperation(typeSystem, schemata, columns, upperCase.operand());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return stringFactory.getTypeName();
@@ -242,8 +239,7 @@
         }
         if (operand instanceof NodeDepth) {
             NodeDepth nodeDepth = (NodeDepth)operand;
-            final int locationIndex = getIndexByNodeDepth(orderingColumns,columns,
-                    nodeDepth);
+            final int locationIndex = columns.getLocationIndex(nodeDepth.selectorName().name());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return typeSystem.getLongFactory().getTypeName(); // depth is always LONG
@@ -260,8 +256,7 @@
         }
         if (operand instanceof NodePath) {
             NodePath nodePath = (NodePath)operand;
-            final int locationIndex = getIndextByNodePath(orderingColumns,columns,
-                    nodePath);
+            final int locationIndex = columns.getLocationIndex(nodePath.selectorName().name());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return stringFactory.getTypeName();
@@ -277,8 +272,7 @@
         }
         if (operand instanceof NodeName) {
             NodeName nodeName = (NodeName)operand;
-            final int locationIndex = getIndexByNodeName(orderingColumns,columns,
-                    nodeName);
+            final int locationIndex = columns.getLocationIndex(nodeName.selectorName().name());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return stringFactory.getTypeName();
@@ -295,8 +289,7 @@
         }
         if (operand instanceof NodeLocalName) {
             NodeLocalName nodeName = (NodeLocalName)operand;
-            final int locationIndex = getIndexByNodeLocalName(orderingColumns,columns,
-                    nodeName);
+            final int locationIndex = columns.getLocationIndex(nodeName.selectorName().name());
             return new DynamicOperation() {
                 public String getExpectedType() {
                     return stringFactory.getTypeName();
@@ -314,8 +307,7 @@
         if (operand instanceof FullTextSearchScore) {
             FullTextSearchScore score = (FullTextSearchScore)operand;
             String selectorName = score.selectorName().name();
-            final int index = getIndexByFullTextSearchScore(orderingColumns,columns,
-                    selectorName);
+            final int index = columns.getFullTextSearchScoreIndexFor(selectorName);
             final TypeFactory<Double> doubleFactory = typeSystem.getDoubleFactory();
             if (index < 0) {
                 // No full-text search score for this selector, so return 0.0d;
@@ -341,8 +333,8 @@
         }
         if (operand instanceof ArithmeticOperand) {
             ArithmeticOperand arith = (ArithmeticOperand)operand;
-            final DynamicOperation leftOp = createDynamicOperation(typeSystem, schemata, columns,orderingColumns, arith.left());
-            final DynamicOperation rightOp = createDynamicOperation(typeSystem, schemata, columns,orderingColumns, arith.right());
+            final DynamicOperation leftOp = createDynamicOperation(typeSystem, schemata, columns, arith.left());
+            final DynamicOperation rightOp = createDynamicOperation(typeSystem, schemata, columns, arith.right());
             // compute the expected (common) type ...
             String leftType = leftOp.getExpectedType();
             String rightType = rightOp.getExpectedType();
@@ -469,80 +461,6 @@
         return null;
     }
 
-    private int getIndexByFullTextSearchScore(Columns orderingColumns, Columns columns,
-            String selectorName) {
-        int index = -1;
-        try {
-            index = columns.getFullTextSearchScoreIndexFor(selectorName);
-        } catch (Exception e){
-            index = orderingColumns.getFullTextSearchScoreIndexFor(selectorName);
-        }
-        return index;
-    }
-
-    private int getIndexByNodeLocalName(Columns orderingColumns, Columns columns,
-            NodeLocalName nodeName) {
-        int locationIndex = -1;
-        try {
-            locationIndex = columns.getLocationIndex(nodeName.selectorName().name());
-        } catch (Exception e){
-            locationIndex = orderingColumns.getLocationIndex(nodeName.selectorName().name());
-        }
-        return locationIndex;
-    }
-
-    private int getIndexByNodeName(Columns orderingColumns,Columns columns, NodeName nodeName) {
-        int locationIndex = -1;
-        try {
-            locationIndex = columns.getLocationIndex(nodeName.selectorName().name());
-        } catch (Exception e){
-            locationIndex = orderingColumns.getLocationIndex(nodeName.selectorName().name());
-        }
-        return locationIndex;
-    }
-
-    private int getIndextByNodePath(Columns orderingColumns, Columns columns, NodePath nodePath) {
-        int locationIndex = -1;
-        try {
-            locationIndex = columns.getLocationIndex(nodePath.selectorName().name());;
-        } catch (Exception e){
-            locationIndex = orderingColumns.getLocationIndex(nodePath.selectorName().name());;
-        }
-        return locationIndex;
-    }
-
-    private int getIndexByNodeDepth(Columns orderingColumns, Columns columns, NodeDepth nodeDepth) {
-        int locationIndex = -1;
-        try {
-            locationIndex = columns.getLocationIndex(nodeDepth.selectorName().name());
-        } catch (Exception e){
-            locationIndex = orderingColumns.getLocationIndex(nodeDepth.selectorName().name());
-        }
-        return locationIndex;
-    }
-
-    private String getExpectedType(Columns orderingColumns, Columns columns, final int index) {
-
-        String expectedType = null;
-        try {
-            expectedType = columns.getColumnTypes().get(index);
-        } catch (Exception e){
-            expectedType = orderingColumns.getColumnTypes().get(index);
-        }
-        return expectedType;
-    }
-
-    private int getIndex(Columns orderingColumns, Columns columns, String propertyName,
-            String selectorName) {
-        int index = -1;
-        try {
-            index = columns.getColumnIndexForProperty(selectorName, propertyName);
-        } catch (Exception e){
-            index = orderingColumns.getColumnIndexForProperty(selectorName, propertyName);
-        }
-        return index;
-    }
-
     protected Comparator<Object[]> createSortComparator( QueryContext context,
                                                          Columns columns ) {
         assert context != null;
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/process/QueryProcessor.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/process/QueryProcessor.java	2011-04-22 14:50:43.000000000 +0200
@@ -72,7 +72,6 @@
                                  PlanNode plan ) {
         long nanos = System.nanoTime();
         Columns columns = null;
-        Columns orderingColumns = null;
         List<Object[]> tuples = null;
         try {
             // Find the topmost PROJECT node and build the Columns ...
@@ -84,17 +83,11 @@
             List<String> columnTypes = project.getPropertyAsList(Property.PROJECT_COLUMN_TYPES, String.class);
             assert columnTypes != null;
             assert columnTypes.size() == projectedColumns.size();
-            List<Column> orderingColumnsList = project.getPropertyAsList(Property.ORDERING_COLUMNS, Column.class);
-            List<String> orderingColumnTypes = project.getPropertyAsList(Property.ORDERING_COLUMNS_TYPE, String.class);
             columns = new QueryResultColumns(projectedColumns, columnTypes, context.getHints().hasFullTextSearch);
-            if(orderingColumnsList != null && orderingColumnTypes != null) {
-                orderingColumns = new QueryResultColumns(orderingColumnsList, orderingColumnTypes, false);
-            }
+
             // Go through the plan and create the corresponding ProcessingComponents ...
             Analyzer analyzer = createAnalyzer(context);
-            ProcessingComponent component = createComponent(command, context, plan, columns, orderingColumns, analyzer);
-            project.removeProperty(Property.ORDERING_COLUMNS);
-            project.removeProperty(Property.ORDERING_COLUMNS_TYPE);
+            ProcessingComponent component = createComponent(command, context, plan, columns, analyzer);
             long nanos2 = System.nanoTime();
             statistics = statistics.withResultsFormulationTime(nanos2 - nanos);
             nanos = nanos2;
@@ -188,7 +181,6 @@
      * @param context the context in which query is being evaluated
      * @param node the plan node for which the ProcessingComponent is to be created
      * @param columns the definition of the result columns for this portion of the query
-     * @param orderingColumns 
      * @param analyzer the analyzer (returned from {@link #createAnalyzer(QueryContext)}) that should be used on the components
      *        that evaluate criteria; may be null if a best-effort should be made for the evaluation
      * @return the processing component for this plan node; or null if there was an error recorded in the
@@ -198,7 +190,6 @@
                                                    QueryContext context,
                                                    PlanNode node,
                                                    Columns columns,
-                                                   Columns orderingColumns, 
                                                    Analyzer analyzer ) {
         ProcessingComponent component = null;
         switch (node.getType()) {
@@ -221,7 +212,6 @@
                                                                        context,
                                                                        node.getFirstChild(),
                                                                        columns,
-                                                                       orderingColumns,
                                                                        analyzer);
                 component = new DistinctComponent(distinctDelegate);
                 break;
@@ -237,8 +227,8 @@
                 Columns leftColumns = createColumnsFor(leftPlan, columns);
                 Columns rightColumns = createColumnsFor(rightPlan, columns);
 
-                ProcessingComponent left = createComponent(originalQuery, context, leftPlan, leftColumns,orderingColumns, analyzer);
-                ProcessingComponent right = createComponent(originalQuery, context, rightPlan, rightColumns,orderingColumns, analyzer);
+                ProcessingComponent left = createComponent(originalQuery, context, leftPlan, leftColumns, analyzer);
+                ProcessingComponent right = createComponent(originalQuery, context, rightPlan, rightColumns, analyzer);
                 // Create the join component ...
                 JoinAlgorithm algorithm = node.getProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.class);
                 JoinType joinType = node.getProperty(Property.JOIN_TYPE, JoinType.class);
@@ -278,7 +268,6 @@
                                                                     context,
                                                                     node.getFirstChild(),
                                                                     columns,
-                                                                    orderingColumns,
                                                                     analyzer);
                 // Then create the limit component ...
                 Integer rowLimit = node.getProperty(Property.LIMIT_COUNT, Integer.class);
@@ -298,7 +287,6 @@
                                                                       context,
                                                                       node.getFirstChild(),
                                                                       columns,
-                                                                      orderingColumns,
                                                                       analyzer);
                 // Then create the project component ...
                 List<Column> projectedColumns = node.getPropertyAsList(Property.PROJECT_COLUMNS, Column.class);
@@ -311,7 +299,6 @@
                                                                      context,
                                                                      node.getFirstChild(),
                                                                      columns,
-                                                                     orderingColumns,
                                                                      analyzer);
                 // Then create the select component ...
                 Constraint constraint = node.getProperty(Property.SELECT_CRITERIA, Constraint.class);
@@ -321,7 +308,7 @@
                 // Create the components under the SET_OPERATION ...
                 List<ProcessingComponent> setDelegates = new LinkedList<ProcessingComponent>();
                 for (PlanNode child : node) {
-                    setDelegates.add(createComponent(originalQuery, context, child, columns,orderingColumns, analyzer));
+                    setDelegates.add(createComponent(originalQuery, context, child, columns, analyzer));
                 }
                 // Then create the select component ...
                 Operation operation = node.getProperty(Property.SET_OPERATION, Operation.class);
@@ -346,7 +333,6 @@
                                                                    context,
                                                                    node.getFirstChild(),
                                                                    columns,
-                                                                   orderingColumns,
                                                                    analyzer);
                 // Then create the sort component ...
                 List<Object> orderBys = node.getPropertyAsList(Property.SORT_ORDER_BY, Object.class);
@@ -366,7 +352,7 @@
                             if (alias != null) sourceNamesByAlias.put(alias, name);
                         }
                         // Now create the sorting component ...
-                        component = new SortValuesComponent(sortDelegate, orderings, orderingColumns, sourceNamesByAlias);
+                        component = new SortValuesComponent(sortDelegate, orderings, sourceNamesByAlias);
                     } else {
                         // Order by the location(s) because it's before a merge-join ...
                         component = new SortLocationsComponent(sortDelegate);
@@ -383,8 +369,8 @@
                 leftColumns = createColumnsFor(leftPlan, columns);
                 rightColumns = createColumnsFor(rightPlan, columns);
 
-                left = createComponent(originalQuery, context, leftPlan, leftColumns,orderingColumns, analyzer);
-                right = createComponent(originalQuery, context, rightPlan, rightColumns, orderingColumns, analyzer);
+                left = createComponent(originalQuery, context, leftPlan, leftColumns, analyzer);
+                right = createComponent(originalQuery, context, rightPlan, rightColumns, analyzer);
 
                 // Look for a variable name on the left and right plans ...
                 String leftVariableName = leftPlan.getProperty(Property.VARIABLE_NAME, String.class);
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/process/SelectComponent.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/process/SelectComponent.java	2011-05-04 13:40:14.000000000 +0200
@@ -397,14 +397,14 @@
             Comparison comparison = (Comparison)constraint;
 
             // Create the correct dynamic operation ...
-            DynamicOperation dynamicOperation = createDynamicOperation(types, schemata, columns,null, comparison.operand1());
+            DynamicOperation dynamicOperation = createDynamicOperation(types, schemata, columns, comparison.operand1());
             Operator operator = comparison.operator();
             StaticOperand staticOperand = comparison.operand2();
             return createChecker(types, schemata, columns, dynamicOperation, operator, staticOperand);
         }
         if (constraint instanceof SetCriteria) {
             SetCriteria setCriteria = (SetCriteria)constraint;
-            DynamicOperation dynamicOperation = createDynamicOperation(types, schemata, columns,null, setCriteria.leftOperand());
+            DynamicOperation dynamicOperation = createDynamicOperation(types, schemata, columns, setCriteria.leftOperand());
             Operator operator = Operator.EQUAL_TO;
             final List<ConstraintChecker> checkers = new LinkedList<ConstraintChecker>();
             for (StaticOperand setValue : setCriteria.rightOperands()) {
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/process/SortValuesComponent.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/process/SortValuesComponent.java	2011-04-22 14:50:43.000000000 +0200
@@ -48,10 +48,9 @@
 
     public SortValuesComponent( ProcessingComponent delegate,
                                 List<Ordering> orderings,
-                                Columns orderingColumns,
                                 Map<SelectorName, SelectorName> sourceNamesByAlias ) {
         super(delegate);
-        this.sortingComparator = createSortComparator(delegate.getContext(), delegate.getColumns(), orderings, orderingColumns, sourceNamesByAlias);
+        this.sortingComparator = createSortComparator(delegate.getContext(), delegate.getColumns(), orderings, sourceNamesByAlias);
     }
 
     /**
@@ -79,7 +78,6 @@
     protected Comparator<Object[]> createSortComparator( QueryContext context,
                                                          Columns columns,
                                                          List<Ordering> orderings,
-                                                         Columns orderingColumns,
                                                          Map<SelectorName, SelectorName> sourceNamesByAlias ) {
         assert context != null;
         assert orderings != null;
@@ -87,12 +85,12 @@
             return null;
         }
         if (orderings.size() == 1) {
-            return createSortComparator(context, columns, orderings.get(0),orderingColumns, sourceNamesByAlias);
+            return createSortComparator(context, columns, orderings.get(0), sourceNamesByAlias);
         }
         // Create a comparator that uses an ordered list of comparators ...
         final List<Comparator<Object[]>> comparators = new ArrayList<Comparator<Object[]>>(orderings.size());
         for (Ordering ordering : orderings) {
-            comparators.add(createSortComparator(context, columns, ordering, orderingColumns, sourceNamesByAlias));
+            comparators.add(createSortComparator(context, columns, ordering, sourceNamesByAlias));
         }
         return new Comparator<Object[]>() {
             public int compare( Object[] tuple1,
@@ -110,7 +108,6 @@
     protected Comparator<Object[]> createSortComparator( QueryContext context,
                                                          Columns columns,
                                                          Ordering ordering,
-                                                         Columns orderingColumns,
                                                          final Map<SelectorName, SelectorName> sourceNamesByAlias ) {
         assert context != null;
         assert ordering != null;
@@ -133,7 +130,6 @@
         final DynamicOperation operation = createDynamicOperation(context.getTypeSystem(),
                                                                   schemataWithAliases,
                                                                   columns,
-                                                                  orderingColumns,
                                                                   ordering.operand());
         final TypeSystem typeSystem = context.getTypeSystem();
         final TypeFactory<?> typeFactory = typeSystem.getTypeFactory(operation.getExpectedType());
--- modeshape-stone/modeshape-graph/src/main/java/org/modeshape/graph/query/QueryBuilder.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/main/java/org/modeshape/graph/query/QueryBuilder.java	2011-05-04 13:40:14.000000000 +0200
@@ -725,7 +725,7 @@
      * @see #clear()
      */
     public QueryCommand query() {
-        QueryCommand result = new Query(source, constraint, orderings, columns, null, limit, distinct);
+        QueryCommand result = new Query(source, constraint, orderings, columns, limit, distinct);
         if (this.firstQuery != null) {
             // EXCEPT has a higher precedence than INTERSECT or UNION, so if the first query is
             // an INTERSECT or UNION SetQuery, the result should be applied to the RHS of the previous set ...
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/federation/AbstractFederatedRepositorySourceIntegrationTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/federation/AbstractFederatedRepositorySourceIntegrationTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -93,7 +93,7 @@
         repositoryName = "Test Repository";
 
         // Set up the configuration repository ...
-        configRepositorySource = new InMemoryRepositorySource(context);
+        configRepositorySource = new InMemoryRepositorySource();
         configRepositorySource.setName("Configuration Repository");
         configRepositorySource.setDefaultWorkspaceName(configurationWorkspaceName);
 
@@ -211,7 +211,7 @@
         InMemoryRepositorySource source = sources.get(sourceName);
         if (source == null) {
             // Add a new source with this name ...
-            source = new InMemoryRepositorySource(context);
+            source = new InMemoryRepositorySource();
             source.setName(sourceName);
             sources.put(sourceName, source);
             final InMemoryRepositorySource newSource = source;
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/federation/FederatedRepositorySourceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/federation/FederatedRepositorySourceTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -82,7 +82,7 @@
         context = new ExecutionContext();
         configurationSourceName = "configuration";
         repositoryName = "Test Repository";
-        configRepositorySource = new InMemoryRepositorySource(context);
+        configRepositorySource = new InMemoryRepositorySource();
         configRepositorySource.setName("Configuration Repository");
 
         repositoryContext = new RepositoryContext() {
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorReadableTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorReadableTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -40,7 +40,7 @@
      */
     @Override
     protected RepositorySource setUpSource() {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(null);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Test Repository");
         return source;
     }
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorTransactionalTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorTransactionalTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -40,7 +40,7 @@
      */
     @Override
     protected RepositorySource setUpSource() {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(null);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Test Repository");
         return source;
     }
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorWorkspaceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorWorkspaceTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -42,7 +42,7 @@
      */
     @Override
     protected RepositorySource setUpSource() {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(null);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Test Repository");
         return source;
     }
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorWritableTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryConnectorWritableTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -37,7 +37,7 @@
      */
     @Override
     protected RepositorySource setUpSource() {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(null);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Test Repository");
         return source;
     }
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryRepositorySourceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryRepositorySourceTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -34,7 +34,7 @@
         repositoryContext = mock(RepositoryContext.class);
         when(repositoryContext.getExecutionContext()).thenReturn(context);
 
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName("In-Memory Repository Source");
         source.setPredefinedWorkspaceNames(predefinedWorkspaces);
         // Have to do this or the comparison later will be off when the default workspace is also created
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryRepositoryTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/connector/inmemory/InMemoryRepositoryTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -42,7 +42,7 @@
         context = new ExecutionContext();
         repositoryContext = mock(RepositoryContext.class);
         when(repositoryContext.getExecutionContext()).thenReturn(context);
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName("SomeName");
         source.setRootNodeUuid(UUID.randomUUID());
         source.initialize(repositoryContext);
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/GraphMergerTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/GraphMergerTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -51,7 +51,7 @@
     public void beforeEaach() {
         context = new ExecutionContext();
 
-        graphSource = new InMemoryRepositorySource(context);
+        graphSource = new InMemoryRepositorySource();
         graphSource.setName("Graph source");
 
         initialContentSource = new XmlFileRepositorySource();
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/io/GraphSequencerOutputTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/io/GraphSequencerOutputTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -50,7 +50,7 @@
     public void beforeEach() {
         context = new ExecutionContext();
 
-        final InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        final InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("actual");
         RepositoryContext repositoryContext = new RepositoryContext() {
             @SuppressWarnings( "synthetic-access" )
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/property/basic/GraphNamespaceRegistryTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/property/basic/GraphNamespaceRegistryTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -71,7 +71,7 @@
             propertyFactory.create(nameFactory.create("other:something2"), "Some other value2")};
 
         // Set up the repository that we'll be using ...
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName("namespace repository");
         graph = Graph.create(source, context);
 
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/query/optimize/RuleBasedOptimizerTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/query/optimize/RuleBasedOptimizerTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -30,7 +30,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.modeshape.common.FixFor;
 import org.modeshape.common.collection.Problems;
@@ -659,7 +658,6 @@
         PlanNode leftAccess = new PlanNode(Type.ACCESS, sort, selector("t1"));
         PlanNode leftProject = new PlanNode(Type.PROJECT, leftAccess, selector("t1"));
         leftProject.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11", "c1"), column("t1", "c12")));
-        leftProject.setProperty(Property.ORDERING_COLUMNS,columns(column("t1", "c11") , column("t1", "c12")));
         PlanNode leftSelect1 = new PlanNode(Type.SELECT, leftProject, selector("t1"));
         leftSelect1.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("t1"), "c11"),
                                                                          Operator.EQUAL_TO, new Literal("x")));
@@ -684,7 +682,6 @@
         PlanNode leftAccess = new PlanNode(Type.ACCESS, sort, selector("X"));
         PlanNode leftProject = new PlanNode(Type.PROJECT, leftAccess, selector("X"));
         leftProject.setProperty(Property.PROJECT_COLUMNS, columns(column("X", "c11", "c1"), column("X", "c12")));
-        leftProject.setProperty(Property.ORDERING_COLUMNS, columns(column("X", "c11"), column("X", "c12")));
         PlanNode leftSelect1 = new PlanNode(Type.SELECT, leftProject, selector("X"));
         leftSelect1.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("X"), "c11"),
                                                                          Operator.EQUAL_TO, new Literal("x")));
@@ -710,7 +707,6 @@
         PlanNode leftAccess = new PlanNode(Type.ACCESS, sort, selector("X"));
         PlanNode leftProject = new PlanNode(Type.PROJECT, leftAccess, selector("X"));
         leftProject.setProperty(Property.PROJECT_COLUMNS, columns(column("X", "c11", "c1"), column("X", "c12")));
-        leftProject.setProperty(Property.ORDERING_COLUMNS, columns(column("X", "c1"), column("X", "c12")));
         PlanNode leftSelect1 = new PlanNode(Type.SELECT, leftProject, selector("X"));
         leftSelect1.setProperty(Property.SELECT_CRITERIA, new Comparison(new PropertyValue(selector("X"), "c11"),
                                                                          Operator.EQUAL_TO, new Literal("x")));
@@ -735,8 +731,6 @@
         sort.setProperty(Property.SORT_ORDER_BY, orderings(ascending("t1", "c11"), descending("t1", "c12")));
         PlanNode project = new PlanNode(Type.PROJECT, sort, selector("t1"));
         project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11", "c1")));
-        //TODO optimizer must replace table name with view
-        project.setProperty(Property.ORDERING_COLUMNS, columns(column("v2", "c11"), column("v2", "c12")));
         PlanNode join = new PlanNode(Type.JOIN, project, selector("t2"), selector("t1"));
         join.setProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.NESTED_LOOP);
         join.setProperty(Property.JOIN_TYPE, JoinType.INNER);
@@ -778,8 +772,6 @@
         sort.setProperty(Property.SORT_ORDER_BY, orderings(ascending("t1", "c11"), descending("t1", "c12")));
         PlanNode project = new PlanNode(Type.PROJECT, sort, selector("t1"));
         project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11", "c1")));
-        //TODO optimizer must replace table name with view
-        project.setProperty(Property.ORDERING_COLUMNS, columns(column("Q", "c11"), column("Q", "c12")));
         PlanNode join = new PlanNode(Type.JOIN, project, selector("t2"), selector("t1"));
         join.setProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.NESTED_LOOP);
         join.setProperty(Property.JOIN_TYPE, JoinType.INNER);
@@ -821,8 +813,6 @@
         sort.setProperty(Property.SORT_ORDER_BY, orderings(ascendingScore("t1", "t2")));
         PlanNode project = new PlanNode(Type.PROJECT, sort, selector("t1"));
         project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11", "c1")));
-        //TODO optimizer must replace table name with view
-        project.setProperty(Property.ORDERING_COLUMNS, columns(column("v2","SCORE")));
         PlanNode join = new PlanNode(Type.JOIN, project, selector("t2"), selector("t1"));
         join.setProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.NESTED_LOOP);
         join.setProperty(Property.JOIN_TYPE, JoinType.INNER);
@@ -864,8 +854,6 @@
         sort.setProperty(Property.SORT_ORDER_BY, orderings(ascending("t1", "c11"), ascending("t1", "c12")));
         PlanNode project = new PlanNode(Type.PROJECT, sort, selector("t1"));
         project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11")));
-        //TODO optimizer must replace table name with view
-        project.setProperty(Property.ORDERING_COLUMNS, columns(column("v2", "c11"), column("v2", "c12")));
         PlanNode join = new PlanNode(Type.JOIN, project, selector("t2"), selector("t1"));
         join.setProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.NESTED_LOOP);
         join.setProperty(Property.JOIN_TYPE, JoinType.INNER);
@@ -907,8 +895,6 @@
         sort.setProperty(Property.SORT_ORDER_BY, orderings(ascending("t1", "c11"), ascending("t1", "c12")));
         PlanNode project = new PlanNode(Type.PROJECT, sort, selector("t1"));
         project.setProperty(Property.PROJECT_COLUMNS, columns(column("t1", "c11")));
-        //TODO optimizer must replace table name with view
-        project.setProperty(Property.ORDERING_COLUMNS, columns(column("v2", "c11"), column("v2", "c12")));
         PlanNode join = new PlanNode(Type.JOIN, project, selector("t2"), selector("t1"));
         join.setProperty(Property.JOIN_ALGORITHM, JoinAlgorithm.NESTED_LOOP);
         join.setProperty(Property.JOIN_TYPE, JoinType.INNER);
@@ -1022,12 +1008,6 @@
             List<String> types = PlanUtil.findRequiredColumnTypes(context, columns, project);
             assertThat(columns.size(), is(types.size()));
             project.setProperty(Property.PROJECT_COLUMN_TYPES, types);
-            List<Column> orderingColumns = project.getPropertyAsList(Property.ORDERING_COLUMNS, Column.class);
-            if (orderingColumns != null) {
-                List<String> orderingTypes = PlanUtil.findRequiredColumnTypes(context, orderingColumns, project);
-                assertThat(orderingColumns.size(), is(orderingTypes.size()));
-                project.setProperty(Property.ORDERING_COLUMNS_TYPE, orderingTypes);
-            }
         }
     }
 }
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/query/process/AbstractQueryResultsTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/query/process/AbstractQueryResultsTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -53,7 +53,7 @@
  */
 public abstract class AbstractQueryResultsTest extends AbstractQueryTest {
 
-    protected ExecutionContext executionContext = ExecutionContext.getDefaultContext();
+    protected ExecutionContext executionContext = ExecutionContext.DEFAULT_CONTEXT;
     protected TypeSystem typeSystem = executionContext.getValueFactories().getTypeSystem();
 
     protected Path path( String name ) {
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/query/process/SortValuesComponentTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/query/process/SortValuesComponentTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -70,13 +70,13 @@
         };
         // Create the component we're testing ...
         orderings = new ArrayList<Ordering>();
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
     }
 
     @Test
     public void shouldReturnAllResultsOrderedByNodeName() {
         orderings.add(orderByNodeName("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1/c1", "v1", 100, "v4"));
         inputTuples.add(tuple(columns, "/a/b2/c4", "v4", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b3/c2", 100, 100, "v2"));
@@ -92,7 +92,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByNodeNameWhenThereAreDuplicateTuples() {
         orderings.add(orderByNodeName("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1/c1", "v1", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b2/c4", "v1", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b3/c2", "v1", 100, "v3"));
@@ -114,7 +114,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByNodeDepth() {
         orderings.add(orderByNodeDepth("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1", "v1", 100, "v4"));
         inputTuples.add(tuple(columns, "/a/b2/c4", "v4", 100, "v3"));
         inputTuples.add(tuple(columns, "/a", 100, 100, "v2"));
@@ -130,7 +130,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByNodePath() {
         orderings.add(orderByNodePath("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1", "v1", 100, "v4"));
         inputTuples.add(tuple(columns, "/a/b1/c4[2]", "v4", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b1/c2", 100, 100, "v2"));
@@ -146,7 +146,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByNodeLocalName() {
         orderings.add(orderByNodeLocalName("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1/c1", "v1", 100, "v4"));
         inputTuples.add(tuple(columns, "/a/b2/c4", "v4", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b3/c2", 100, 100, "v2"));
@@ -162,7 +162,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByNodeLocalNameWhenThereAreDuplicateTuples() {
         orderings.add(orderByNodeName("Selector1"));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b1/mode:c1", "v1", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b2/mode:c4", "v1", 100, "v3"));
         inputTuples.add(tuple(columns, "/a/b3/mode:c2", "v1", 100, "v3"));
@@ -184,7 +184,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByValueLengthOfLong() {
         orderings.add(orderByPropertyLength(columns.getColumns().get(1)));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b/c1", "v1", 1L, "v4"));
         inputTuples.add(tuple(columns, "/a/b/c4", "v1", 1114L, "v3"));
         inputTuples.add(tuple(columns, "/a/b/c2", "v1", 113L, "v2"));
@@ -200,7 +200,7 @@
     @Test
     public void shouldReturnAllResultsOrderedByValueLengthOfString() {
         orderings.add(orderByPropertyLength(columns.getColumns().get(0)));
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b/c1", "v1", 100L, "v4"));
         inputTuples.add(tuple(columns, "/a/b/c4", "v1111", 100L, "v3"));
         inputTuples.add(tuple(columns, "/a/b/c2", "v111", 100L, "v2"));
@@ -216,7 +216,7 @@
     @Test
     public void shouldReturnAllResultsInSuppliedOrderWhenThereAreNoOrderings() {
         orderings.clear();
-        component = new SortValuesComponent(delegate, orderings, null, null);
+        component = new SortValuesComponent(delegate, orderings, null);
         inputTuples.add(tuple(columns, "/a/b/c1", "v1", 100L, "v3"));
         inputTuples.add(tuple(columns, "/a/b/c4", "v1", 100L, "v3"));
         inputTuples.add(tuple(columns, "/a/b/c2", "v1", 100L, "v3"));
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/search/SearchableRepositorySourceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/search/SearchableRepositorySourceTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -90,7 +90,7 @@
         schemata = ImmutableSchemata.createBuilder(typeSystem).addTable("t1", "c1", "c2", "c3").build();
         sql = new SqlQueryParser();
 
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("source1");
         this.wrapped = source;
 
@@ -219,7 +219,7 @@
             }
         };
         final AtomicInteger called = new AtomicInteger(0);
-        wrapped = new InMemoryRepositorySource(context) {
+        wrapped = new InMemoryRepositorySource() {
             private static final long serialVersionUID = 1L;
 
             @Override
--- modeshape-stone/modeshape-graph/src/test/java/org/modeshape/graph/session/GraphSessionTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-graph/src/test/java/org/modeshape/graph/session/GraphSessionTest.java	2011-04-22 14:50:43.000000000 +0200
@@ -71,7 +71,7 @@
     public void beforeEach() throws Exception {
         context = new ExecutionContext();
         pathFactory = context.getValueFactories().getPathFactory();
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName("store");
         // Use a connection factory so we can count the number of connections that were made
         RepositoryConnectionFactory connectionFactory = new RepositoryConnectionFactory() {
--- modeshape-stone/modeshape-jcr/src/main/java/org/modeshape/jcr/GraphNodeTypeReader.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/main/java/org/modeshape/jcr/GraphNodeTypeReader.java	2011-05-04 13:40:14.000000000 +0200
@@ -273,7 +273,7 @@
     @SuppressWarnings( "cast" )
     public void read( String content,
                       String resourceName ) {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("Node Type Import Source");
         Graph graph = Graph.create(source, context);
 
--- modeshape-stone/modeshape-jcr/src/main/java/org/modeshape/jcr/JackrabbitXmlNodeTypeReader.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/main/java/org/modeshape/jcr/JackrabbitXmlNodeTypeReader.java	2011-04-22 14:50:44.000000000 +0200
@@ -398,7 +398,7 @@
                               Problems problems,
                               String resourceName ) throws SAXException, IOException {
             ExecutionContext context = destination.getExecutionContext();
-            InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+            InMemoryRepositorySource source = new InMemoryRepositorySource();
             source.setName("XML Import Source");
             Graph graph = Graph.create(source, context);
             graph.importXmlFrom(content).into("/");
--- modeshape-stone/modeshape-jcr/src/main/java/org/modeshape/jcr/JcrRepository.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/main/java/org/modeshape/jcr/JcrRepository.java	2011-05-04 13:40:14.000000000 +0200
@@ -657,7 +657,7 @@
             // (The federation connector refers to this configuration as an "offset mirror".)
             systemWorkspaceName = "jcr:system";
             systemSourceName = "jcr:system source";
-            transientSystemSource = new InMemoryRepositorySource(executionContext);
+            transientSystemSource = new InMemoryRepositorySource();
             transientSystemSource.setName(systemSourceName);
             transientSystemSource.setDefaultWorkspaceName(systemWorkspaceName);
             connectionFactoryWithSystem = new DelegatingConnectionFactory(connectionFactory, transientSystemSource);
--- modeshape-stone/modeshape-jcr/src/main/java/org/modeshape/jcr/query/JcrSql2QueryParser.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/main/java/org/modeshape/jcr/query/JcrSql2QueryParser.java	2011-04-22 14:50:44.000000000 +0200
@@ -143,7 +143,6 @@
                                     Constraint constraint,
                                     List<? extends Ordering> orderings,
                                     List<? extends Column> columns,
-                                    List<? extends Column> orderingColumns,
                                     Limit limit,
                                     boolean distinct ) {
         return new JcrSelectQuery((JcrSource)source, (JcrConstraint)constraint, orderings(orderings), columns(columns),
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrAccessTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrAccessTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -60,17 +60,16 @@
 
         String workspaceName = "workspace1";
 
+        // Set up the source ...
+        source = new InMemoryRepositorySource();
+        source.setName(workspaceName);
+        source.setDefaultWorkspaceName(workspaceName);
 
         // Set up the execution context ...
         ExecutionContext context = new ExecutionContext();
         // Register the test namespace
         context.getNamespaceRegistry().register(TestLexicon.Namespace.PREFIX, TestLexicon.Namespace.URI);
 
-        // Set up the source ...
-        source = new InMemoryRepositorySource(context);
-        source.setName(workspaceName);
-        source.setDefaultWorkspaceName(workspaceName);
-
         // Stub out the connection factory ...
         RepositoryConnectionFactory connectionFactory = new RepositoryConnectionFactory() {
             /**
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrNodeTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrNodeTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -634,7 +634,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheRepositoryInstanceIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -657,7 +657,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheWorkspaceNameIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -691,7 +691,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheNodeUuidIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -725,7 +725,7 @@
     @Test
     public void shouldReturnTrueFromIsSameIfTheNodeUuidAndWorkspaceNameAndRepositoryInstanceAreSame() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrPropertyTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrPropertyTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -134,7 +134,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheRepositoryInstanceIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -163,7 +163,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheWorkspaceNameIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -202,7 +202,7 @@
     @Test
     public void shouldReturnFalseFromIsSameIfTheNodeUuidIsDifferent() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
@@ -241,7 +241,7 @@
     @Test
     public void shouldReturnTrueFromIsSameIfTheNodeUuidAndWorkspaceNameAndRepositoryInstanceAreSame() throws Exception {
         // Set up the store ...
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName("store");
         Graph store2 = Graph.create(source2, context);
         store2.importXmlFrom(AbstractJcrTest.class.getClassLoader().getResourceAsStream("cars.xml")).into("/");
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractJcrTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -107,7 +107,7 @@
     @Before
     public void beforeEach() throws Exception {
         // Set up the store ...
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName("store");
         // Use a connection factory so we can count the number of connections that were made
         RepositoryConnectionFactory connectionFactory = new RepositoryConnectionFactory() {
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractSessionTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/AbstractSessionTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -89,17 +89,17 @@
         workspaceName = "workspace1";
         final String repositorySourceName = "repository";
 
+        // Set up the source ...
+        source = new InMemoryRepositorySource();
+        source.setName(workspaceName);
+        source.setDefaultWorkspaceName(workspaceName);
+
         // Set up the execution context ...
         context = new ExecutionContext();
         // Register the test namespace
         context.getNamespaceRegistry().register(TestLexicon.Namespace.PREFIX, TestLexicon.Namespace.URI);
         PathFactory pathFactory = context.getValueFactories().getPathFactory();
 
-        // Set up the source ...
-        source = new InMemoryRepositorySource(context);
-        source.setName(workspaceName);
-        source.setDefaultWorkspaceName(workspaceName);
-
         // Set up the initial content ...
         graph = JcrGraph.create(source, context);
 
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/ImportExportTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/ImportExportTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -74,17 +74,16 @@
 
         String workspaceName = "workspace1";
 
+        // Set up the source ...
+        source = new InMemoryRepositorySource();
+        source.setName(workspaceName);
+        source.setDefaultWorkspaceName(workspaceName);
 
         // Set up the execution context ...
         ExecutionContext context = new ExecutionContext();
         // Register the test namespace
         context.getNamespaceRegistry().register(TestLexicon.Namespace.PREFIX, TestLexicon.Namespace.URI);
 
-        // Set up the source ...
-        source = new InMemoryRepositorySource(context);
-        source.setName(workspaceName);
-        source.setDefaultWorkspaceName(workspaceName);
-
         // Stub out the connection factory ...
         RepositoryConnectionFactory connectionFactory = new RepositoryConnectionFactory() {
             @SuppressWarnings( "synthetic-access" )
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrConfigurationTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrConfigurationTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -174,7 +174,7 @@
 
     @Test
     public void shouldAllowSettingUpConfigurationRepositoryWithDifferentWorkspaceName() throws Exception {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(context());
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config2");
         configSource.setRetryLimit(5);
         configuration.loadFrom(configSource, "workspaceXYZ");
--- modeshape-stone/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrRepositoryTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrRepositoryTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -100,15 +100,14 @@
         MockitoAnnotations.initMocks(this);
         sourceName = "repository";
 
+        // Set up the source ...
+        source = new InMemoryRepositorySource();
+        source.setName(sourceName);
 
         // Set up the execution context ...
         context = new ExecutionContext();
         credentials = new SimpleCredentials("superuser", "superuser".toCharArray());
 
-        // Set up the source ...
-        source = new InMemoryRepositorySource(context);
-        source.setName(sourceName);
-
         // Stub out the connection factory ...
         connectionFactory = new RepositoryConnectionFactory() {
             /**
@@ -637,7 +636,7 @@
     @Test
     public void shouldHaveAvailableWorkspacesMatchingThoseInSourceContainingJustDefaultWorkspace() throws Exception {
         // Set up the source ...
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName(sourceName);
         sourceGraph = Graph.create(source(), context);
 
@@ -657,7 +656,7 @@
     @Test
     public void shouldHaveAvailableWorkspacesMatchingThoseInSourceContainingPredefinedWorkspaces() throws Exception {
         // Set up the source ...
-        source = new InMemoryRepositorySource(context);
+        source = new InMemoryRepositorySource();
         source.setName(sourceName);
         source.setPredefinedWorkspaceNames(new String[] {"ws1", "ws2", "ws3"});
         source.setDefaultWorkspaceName("ws1");
--- modeshape-stone/modeshape-repository/src/main/java/org/modeshape/repository/cluster/ClusteringService.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/main/java/org/modeshape/repository/cluster/ClusteringService.java	2011-05-04 13:40:14.000000000 +0200
@@ -107,7 +107,7 @@
             throw new IllegalStateException(RepositoryI18n.unableToChangeExecutionContextWhileRunning.text());
         }
         this.executionContext = executionContext;
-        this.busLibrary.setClassLoaderFactory(executionContext.getClassLoaderFactory());
+        this.busLibrary.setClassLoaderFactory(executionContext);
     }
 
     /**
--- modeshape-stone/modeshape-repository/src/main/java/org/modeshape/repository/ModeShapeConfiguration.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/main/java/org/modeshape/repository/ModeShapeConfiguration.java	2011-05-04 13:40:14.000000000 +0200
@@ -123,12 +123,12 @@
         this.context = context;
 
         // Create the in-memory repository source in which the content will be stored ...
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName(DEFAULT_CONFIGURATION_SOURCE_NAME);
         source.setDefaultWorkspaceName(DEFAULT_WORKSPACE_NAME);
 
         // The file was imported successfully, so now create the content information ...
-        configurationContent = new ConfigurationDefinition("dna", source, null, null, context, context.getClassLoaderFactory());
+        configurationContent = new ConfigurationDefinition("dna", source, null, null, context, null);
     }
 
     /**
@@ -276,7 +276,7 @@
         CheckArg.isNotNull(configurationFileInputStream, "configurationFileInputStream");
 
         // Create the in-memory repository source in which the content will be stored ...
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName(DEFAULT_CONFIGURATION_SOURCE_NAME);
         source.setDefaultWorkspaceName(DEFAULT_WORKSPACE_NAME);
 
--- modeshape-stone/modeshape-repository/src/main/java/org/modeshape/repository/ModeShapeEngine.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/main/java/org/modeshape/repository/ModeShapeEngine.java	2011-05-04 13:40:14.000000000 +0200
@@ -110,7 +110,7 @@
         this.logger = Logger.getLogger(getClass());
 
         // Use the configuration's context ...
-        this.detectors = new MimeTypeDetectors(context.getClassLoaderFactory());
+        this.detectors = new MimeTypeDetectors();
         this.context = context.with(detectors).with(engineId);
 
         // And set up the scanner ...
--- modeshape-stone/modeshape-repository/src/main/java/org/modeshape/repository/RepositoryService.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/main/java/org/modeshape/repository/RepositoryService.java	2011-05-04 13:40:14.000000000 +0200
@@ -23,7 +23,6 @@
  */
 package org.modeshape.repository;
 
-import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.LinkedList;
@@ -306,17 +305,11 @@
         // Create the instance ...
         String classname = stringFactory.create(classnameProperty.getValues().next());
         String[] classpath = classpathProperty == null ? new String[] {} : stringFactory.create(classpathProperty.getValuesAsArray());
-        ClassLoader classLoader = context.getClassLoaderFactory().getClassLoader(classpath);
+        ClassLoader classLoader = context.getClassLoader(classpath);
         Object instance = null;
         try {
             Class<?> sourceClass = classLoader.loadClass(classname);
-            try {
-                Constructor<?> constructorWithExecutionContextAsParameter = sourceClass.getConstructor(ExecutionContext.class);
-                instance = constructorWithExecutionContextAsParameter.newInstance(context);
-            }
-            catch (Exception e) {
                 instance = sourceClass.newInstance();
-            }
         } catch (ClassNotFoundException err) {
             problems.addError(err, RepositoryI18n.unableToLoadClassUsingClasspath, classname, classpath);
         } catch (IllegalAccessException err) {
--- modeshape-stone/modeshape-repository/src/test/java/org/modeshape/repository/ModeShapeConfigurationTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/test/java/org/modeshape/repository/ModeShapeConfigurationTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -178,7 +178,7 @@
 
     @Test
     public void shoulLoadConfigurationFromRepositorySource() throws Exception {
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName("name");
         configuration.loadFrom(source);
         assertThat(configuration.getProblems().isEmpty(), is(true));
@@ -205,7 +205,7 @@
 
     @Test
     public void shouldLoadConfigurationFromInMemoryRepositorySource() {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config repo");
         configuration.loadFrom(configSource).and().save();
         assertThat(configuration, is(notNullValue()));
@@ -536,7 +536,7 @@
             this.parents = new Stack<Path>();
 
             String name = "Handler Source";
-            source = new InMemoryRepositorySource(context);
+            source = new InMemoryRepositorySource();
             source.setName(name);
 
             this.graph = Graph.create(source, context);
--- modeshape-stone/modeshape-repository/src/test/java/org/modeshape/repository/ModeShapeEngineTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/test/java/org/modeshape/repository/ModeShapeEngineTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -34,7 +34,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.modeshape.common.collection.Problem;
-import org.modeshape.graph.ExecutionContext;
 import org.modeshape.graph.connector.RepositoryConnection;
 import org.modeshape.graph.connector.inmemory.InMemoryRepositorySource;
 import org.modeshape.graph.connector.path.cache.InMemoryWorkspaceCache.InMemoryCachePolicy;
@@ -74,7 +73,7 @@
 
     @Test
     public void shouldAllowCreatingWithConfigRepository() throws InterruptedException {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(new ExecutionContext());
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config repo");
         engine = new ModeShapeConfiguration().loadFrom(configSource).build();
         engine.start();
@@ -93,7 +92,7 @@
 
     @Test
     public void shouldAllowCreatingMultipleRepositorySources() throws Exception {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(new ExecutionContext());
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config repo");
         engine = new ModeShapeConfiguration().loadFrom(configSource)
                                              .and()
@@ -124,7 +123,7 @@
 
     @Test
     public void shouldAllowAddingMimeTypeDetectors() throws Exception {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(new ExecutionContext());
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config repo");
         engine = new ModeShapeConfiguration().loadFrom(configSource)
                                              .and()
@@ -149,7 +148,7 @@
 
     @Test
     public void shouldAllowAddingSequencers() throws Exception {
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(new ExecutionContext());
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setName("config repo");
         engine = new ModeShapeConfiguration().loadFrom(configSource)
                                              .and()
--- modeshape-stone/modeshape-repository/src/test/java/org/modeshape/repository/RepositoryServiceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/test/java/org/modeshape/repository/RepositoryServiceTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -75,7 +75,7 @@
         context.getNamespaceRegistry().register(ModeShapeLexicon.Namespace.PREFIX, ModeShapeLexicon.Namespace.URI);
         configSourceName = "configSource";
         configWorkspaceName = null;
-        configRepositorySource = new InMemoryRepositorySource(context);
+        configRepositorySource = new InMemoryRepositorySource();
         configRepositorySource.setName(configSourceName);
         configRepositorySource.setDefaultWorkspaceName("default");
         configRepository = Graph.create(configRepositorySource, context);
--- modeshape-stone/modeshape-repository/src/test/java/org/modeshape/repository/sequencer/SequencingServiceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/test/java/org/modeshape/repository/sequencer/SequencingServiceTest.java	2011-04-22 14:50:44.000000000 +0200
@@ -59,12 +59,12 @@
     @Before
     public void beforeEach() {
         ExecutionContext context = new ExecutionContext();
-        InMemoryRepositorySource configSource = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource configSource = new InMemoryRepositorySource();
         configSource.setDefaultWorkspaceName("default");
         Path configPath = context.getValueFactories().getPathFactory().create("/");
 
         sources = new RepositoryLibrary(configSource, "default", configPath, context, new LocalObservationBus());
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName(REPOSITORY_SOURCE_NAME);
         sources.addSource(source);
 
--- modeshape-stone/modeshape-repository/src/test/java/org/modeshape/repository/sequencer/StreamSequencerAdapterTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/modeshape-repository/src/test/java/org/modeshape/repository/sequencer/StreamSequencerAdapterTest.java	2011-05-04 13:40:14.000000000 +0200
@@ -93,7 +93,7 @@
         this.sequencerOutput = new SequencerOutputMap(this.context.getValueFactories());
         final SequencerOutputMap finalOutput = sequencerOutput;
 
-        InMemoryRepositorySource source = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source = new InMemoryRepositorySource();
         source.setName(repositorySourceName);
         graph = Graph.create(source.getConnection(), context);
         this.streamSequencer = new StreamSequencer() {
@@ -606,7 +606,7 @@
     public void shouldSequenceInputFromOneGraphAndSaveOutputToAnotherGraph() throws Exception {
         // Set up the second source ...
         String repositorySourceName2 = "repository2";
-        InMemoryRepositorySource source2 = new InMemoryRepositorySource(context);
+        InMemoryRepositorySource source2 = new InMemoryRepositorySource();
         source2.setName(repositorySourceName2);
         Graph graph2 = Graph.create(source2.getConnection(), context);
         seqContext = new SequencerContext(context, graph, graph2, now);
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/CredentialsFactory.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/CredentialsFactory.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,18 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.Credentials;
-import javax.jcr.SimpleCredentials;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class CredentialsFactory {
-
-    final Logger logger = LoggerFactory.getLogger(this.getClass());
-    
-    public Credentials createCredentials( String username,
-                                          String password ) {
-        logger.info("Creating credentials with username: " + username + ", password: " + password);
-        return new SimpleCredentials(username, password.toCharArray());
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/JackrabbitRepositorySource.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/JackrabbitRepositorySource.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,92 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.Credentials;
-import javax.jcr.RepositoryException;
-import javax.naming.Reference;
-import net.jcip.annotations.ThreadSafe;
-import org.modeshape.common.annotation.Category;
-import org.modeshape.common.annotation.Description;
-import org.modeshape.common.annotation.Label;
-import org.modeshape.common.i18n.I18n;
-import org.modeshape.connector.jcr.JcrConnectorI18n;
-import org.modeshape.connector.jcr.JcrRepositorySource;
-import org.modeshape.graph.connector.RepositoryConnection;
-import org.modeshape.graph.connector.RepositoryContext;
-import org.modeshape.graph.connector.RepositorySourceCapabilities;
-import org.modeshape.graph.connector.RepositorySourceException;
-
-@ThreadSafe
-public class JackrabbitRepositorySource extends JcrRepositorySource {
-
-    private static final boolean SUPPORTS_REFERENCES = true;
-    private static final boolean SUPPORTS_CREATING_WORKSPACES = true;
-    private static final boolean SUPPORTS_EVENTS = false;
-    private static final boolean SUPPORTS_UPDATES = true;
-    private static final boolean SUPPORTS_SAME_NAME_SIBLINGS = true;
-
-    @Description( i18n = JcrConnectorI18n.class, value = "urlPropertyDescription" )
-    @Label( i18n = JcrConnectorI18n.class, value = "urlPropertyLabel" )
-    @Category( i18n = JcrConnectorI18n.class, value = "urlPropertyCategory" )
-    private volatile String url;
-    
-    private volatile RepositorySourceCapabilities capabilities = new RepositorySourceCapabilities(SUPPORTS_SAME_NAME_SIBLINGS, SUPPORTS_UPDATES, SUPPORTS_EVENTS, SUPPORTS_CREATING_WORKSPACES, SUPPORTS_REFERENCES);
-
-    private CredentialsFactory credentialsFactory;
-    private RepositoryFactory repositoryFactory;
-    private RepositoryConnectionFactory repositoryConnectionFactory;
-
-    @Override
-    public synchronized Reference getReference() {
-        throw new RuntimeException("Method getReference not yet implemented");
-    }
-    
-    @Override
-    public void initialize( RepositoryContext context ) throws RepositorySourceException {
-        super.initialize(context);
-        this.credentialsFactory = new CredentialsFactory();
-        this.repositoryFactory = new RepositoryFactory();
-        this.repositoryConnectionFactory = new RepositoryConnectionFactory();
-    }
-    
-    @Override
-    public RepositoryConnection getConnection() throws RepositorySourceException {
-        if (null == url || 0 == url.trim().length()) {
-            I18n msg = JcrConnectorI18n.propertyIsRequired;
-            throw new RepositorySourceException(url, msg.text("url"));
-        }
-        
-        try {
-            setRepository(getRepositoryFactory().createRepository(url));
-        } catch (RepositoryException e) {
-            e.printStackTrace();
-        }
-        
-        Credentials credentials = getCredentialsFactory().createCredentials(getUsername(), getPassword());
-        return getRepositoryConnectionFactory().createRepositoryConnection(this, getRepository(), credentials);
-    }
-
-    @Override
-    public RepositorySourceCapabilities getCapabilities() {
-        return capabilities;
-    }
-
-    public String getUrl() {
-        return url;
-    }
-    
-    public void setUrl( String url ) {
-        this.url = url;
-    }
-
-    protected RepositoryFactory getRepositoryFactory() {
-        return repositoryFactory;
-    }
-
-    protected CredentialsFactory getCredentialsFactory() {
-        return credentialsFactory;
-    }
-
-    protected RepositoryConnectionFactory getRepositoryConnectionFactory() {
-        return repositoryConnectionFactory;
-    }
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/RepositoryConnectionFactory.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/RepositoryConnectionFactory.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.Credentials;
-import javax.jcr.Repository;
-import org.modeshape.connector.jcr.JcrRepositoryConnection;
-import org.modeshape.connector.jcr.JcrRepositorySource;
-import org.modeshape.graph.connector.RepositoryConnection;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class RepositoryConnectionFactory {
-
-    final Logger logger = LoggerFactory.getLogger(this.getClass());
-
-    public RepositoryConnection createRepositoryConnection( JcrRepositorySource repositorySource,
-                                                            Repository repository,
-                                                            Credentials credentials ) {
-        logger.info("Creating a repository connection");
-        JcrRepositoryConnection jcrRepositoryConnection = new JcrRepositoryConnection(repositorySource, repository, credentials);
-        logger.info("Repository connection created");
-        return jcrRepositoryConnection;
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/RepositoryFactory.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/RepositoryFactory.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,19 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.Repository;
-import javax.jcr.RepositoryException;
-import org.apache.jackrabbit.jcr2spi.RepositoryImpl;
-import org.apache.jackrabbit.jcr2spi.config.RepositoryConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class RepositoryFactory {
-    final Logger logger = LoggerFactory.getLogger(this.getClass());
-
-    public Repository createRepository( String url ) throws RepositoryException {
-        logger.info("Creating repository from url: " + url);
-        RepositoryConfig config = new WebdavRepositoryConfig(url);
-        return RepositoryImpl.create(config);
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/WebdavRepositoryConfig.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/main/java/org/modeshape/connector/jackrabbit/WebdavRepositoryConfig.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,44 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.RepositoryException;
-import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
-import org.apache.jackrabbit.jcr2spi.config.RepositoryConfig;
-import org.apache.jackrabbit.spi.IdFactory;
-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.spi.RepositoryService;
-import org.apache.jackrabbit.spi.commons.identifier.IdFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
-import org.apache.jackrabbit.spi2dav.RepositoryServiceImpl;
-
-public class WebdavRepositoryConfig implements RepositoryConfig {
-
-    private RepositoryService webdavRepositoryService;
-
-    public WebdavRepositoryConfig( String url ) throws RepositoryException {
-        IdFactory idFactory = IdFactoryImpl.getInstance();
-        NameFactory nFactory = NameFactoryImpl.getInstance();
-        PathFactory pFactory = PathFactoryImpl.getInstance();
-        QValueFactory vFactory = QValueFactoryImpl.getInstance();
-        webdavRepositoryService = new RepositoryServiceImpl(url, idFactory, nFactory, pFactory, vFactory);
-    }
-
-    public CacheBehaviour getCacheBehaviour() {
-        return null;
-    }
-
-    public int getItemCacheSize() {
-        return 100;
-    }
-
-    public int getPollTimeout() {
-        return 0;
-    }
-
-    public RepositoryService getRepositoryService() throws RepositoryException {
-        return webdavRepositoryService;
-    }
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitConnectorReadableTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitConnectorReadableTest.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,65 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import javax.jcr.Repository;
-import org.junit.AfterClass;
-import org.modeshape.graph.Graph;
-import org.modeshape.graph.connector.RepositorySource;
-import org.modeshape.graph.connector.test.ReadableConnectorTest;
-import org.modeshape.jcr.JcrEngine;
-
-public class JackrabbitConnectorReadableTest extends ReadableConnectorTest {
-
-    private static JcrEngine engine;
-    private Repository carsRepository;
-
-    @Override
-    protected RepositorySource setUpSource() throws Exception {
-
-        if (null == engine) {
-            engine = JackrabbitConnectorTestUtil.loadEngine();
-            carsRepository = engine.getRepository(JackrabbitConnectorTestUtil.CARS_REPOSITORY_NAME);
-        }
-
-        JackrabbitRepositorySource source = new JackrabbitRepositorySource() {
-
-            @Override
-            public String getName() {
-                return "Cars source";
-            }
-            
-            @Override
-            protected synchronized Repository getRepository() {
-                return carsRepository;
-            }
-
-        };
-        source.setUrl("http://localhost:8080/server");
-        source.setUsername("admin");
-        source.setPassword("admin");
-        return source;
-    }
-
-    @Override
-    public void afterEach() throws Exception {
-
-        try {
-            engine.getGraph(JackrabbitConnectorTestUtil.CARS_SOURCE_NAME).delete("/");
-        } catch (Exception e) {
-        }
-        shutdownRepository();
-    }
-
-    @AfterClass
-    public static void afterAll() throws Exception {
-        try {
-            engine.shutdown();
-        } finally {
-            engine = null;
-        }
-    }
-
-    @Override
-    protected void initializeContent( Graph graph ) throws Exception {
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitConnectorTestUtil.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitConnectorTestUtil.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,73 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import org.jboss.security.config.IDTrustConfiguration;
-import org.modeshape.common.SystemFailureException;
-import org.modeshape.common.collection.Problem;
-import org.modeshape.connector.jackrabbit.JackrabbitRepositorySource;
-import org.modeshape.graph.ExecutionContext;
-import org.modeshape.jcr.JcrConfiguration;
-import org.modeshape.jcr.JcrEngine;
-import org.modeshape.jcr.JcrRepository.Option;
-
-public class JackrabbitConnectorTestUtil {
-
-    protected static final String JAAS_CONFIG_FILE_PATH = "security/jaas.conf.xml";
-    protected static final String JAAS_POLICY_NAME = "modeshape-jcr";
-
-    public static final String CARS_REPOSITORY_NAME = "Cars";
-    protected static final String CARS_SOURCE_NAME = "Cars Source";
-
-    static {
-        String configFile = JAAS_CONFIG_FILE_PATH;
-        IDTrustConfiguration idtrustConfig = new IDTrustConfiguration();
-
-        try {
-            idtrustConfig.config(configFile);
-        } catch (Exception ex) {
-            throw new IllegalStateException(ex);
-        }
-    }
-
-    public static JcrEngine loadEngine() {
-        final ClassLoader classLoader = JackrabbitConnectorTestUtil.class.getClassLoader();
-
-        ExecutionContext newContext = new ExecutionContext();
-        JcrConfiguration configuration = new JcrConfiguration(newContext);
-
-        configuration
-        .repositorySource(CARS_SOURCE_NAME)
-        .setProperty("url", "http://localhost:8080/server")
-        .setProperty("username", "admin")
-        .setProperty("password", "admin")
-        .usingClass(JackrabbitRepositorySource.class.getName())
-        .loadedFromClasspath()
-        .setDescription("Repository source with cars")
-        .and()
-        .repository(CARS_REPOSITORY_NAME)
-        .setDescription("JCR Repository with cars")
-        .setSource(CARS_SOURCE_NAME)
-        .addNodeTypes(classLoader.getResource("cars.cnd"))
-        .addNodeTypes(classLoader.getResource("jackrabbit_builtin_nodetypes.cnd"))
-        .setOption(Option.JAAS_LOGIN_CONFIG_NAME,JAAS_POLICY_NAME);
-        
-        configuration.save();
-
-        JcrEngine engine = configuration.build();
-        engine.start();
-        if (engine.getProblems().hasProblems()) {
-            for (Problem problem : engine.getProblems()) {
-                System.err.println(problem.getMessageString());
-            }
-            throw new RuntimeException("Could not start due to problems");
-        }
-
-        try {
-            engine.getGraph(CARS_SOURCE_NAME).importXmlFrom(classLoader.getResource("cars.xml").toURI()).into("/");
-        } catch (Throwable t) {
-            throw new SystemFailureException("Could not import the content into the repositories", t);
-        }
-
-        return engine;
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitRepositorySourceTest.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit/src/test/java/org/modeshape/connector/jackrabbit/JackrabbitRepositorySourceTest.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,315 +0,0 @@
-package org.modeshape.connector.jackrabbit;
-
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.hamcrest.core.IsNull.nullValue;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.verify;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.List;
-import net.jcip.annotations.ThreadSafe;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.modeshape.common.annotation.Category;
-import org.modeshape.common.annotation.Description;
-import org.modeshape.common.annotation.Label;
-import org.modeshape.connector.jackrabbit.CredentialsFactory;
-import org.modeshape.connector.jackrabbit.JackrabbitRepositorySource;
-import org.modeshape.connector.jackrabbit.RepositoryFactory;
-import org.modeshape.connector.jcr.JcrConnectorI18n;
-import org.modeshape.connector.jcr.JcrRepositorySource;
-import org.modeshape.graph.ExecutionContext;
-import org.modeshape.graph.Subgraph;
-import org.modeshape.graph.connector.RepositoryConnection;
-import org.modeshape.graph.connector.RepositoryContext;
-import org.modeshape.graph.connector.RepositorySourceCapabilities;
-import org.modeshape.graph.connector.RepositorySourceException;
-import org.modeshape.graph.observe.Observer;
-
-public class JackrabbitRepositorySourceTest {
-
-    private JackrabbitRepositorySource repositorySource;
-    
-    @Mock
-    private CredentialsFactory mockedCredentialsFactory;
-    
-    @Mock
-    private RepositoryFactory mockedRepositoryFactory;
-    
-    @Before
-    public void setup() {
-        MockitoAnnotations.initMocks(this);
-        repositorySource = new JackrabbitRepositorySource();
-    }
-
-    @Test( expected = RuntimeException.class )
-    public void shoulThrowAnExceptionWhenGetReferenceIsCalled() throws Exception {
-        repositorySource.getReference();
-    }
-
-    @Test
-    public void shouldSetFactoriesOnInitialize() throws Exception {
-        repositorySource.initialize(null);
-
-        assertNotNull(getFieldValue(repositorySource, "credentialsFactory"));
-        assertNotNull(getFieldValue(repositorySource, "repositoryFactory"));
-        assertNotNull(getFieldValue(repositorySource, "repositoryConnectionFactory"));
-    }
-
-    @Test
-    public void shouldBeAnnotatedAsThreadSafe() throws Exception {
-        ThreadSafe threadSafe = repositorySource.getClass().getAnnotation(ThreadSafe.class);
-        assertNotNull(threadSafe);
-    }
-
-    @Test
-    public void shouldHaveField_url_WithAnnotation_Description() throws Exception {
-        checkDescriptionAnnotation(repositorySource, "url");
-    }
-
-    @Test
-    public void shouldHaveField_url_WithAnnotation_Label() throws Exception {
-        checkLabelAnnotation(repositorySource, "url");
-    }
-
-    @Test
-    public void shouldHaveField_url_WithAnnotation_Category() throws Exception {
-        checkCategoryAnnotation(repositorySource, "url");
-    }
-
-    @Test( expected = RepositorySourceException.class )
-    public void shouldThrowExceptionWhenTryingToGetAConnectionWithParameterUrlNull() throws Exception {
-        repositorySource.getConnection();
-    }
-
-    @Test( expected = RepositorySourceException.class )
-    public void shouldThrowExceptionWhenTryingToGetAConnectionWithParameterUrlBlank() throws Exception {
-        repositorySource.setUrl("     ");
-        repositorySource.getConnection();
-    }
-
-    @Test
-    public void shouldThrowALocalizedExceptionWhenUrlPropertyIsNotDefined() throws Exception {
-        try {
-            repositorySource.getConnection();
-            fail("Should throw an exception");
-        } catch (RepositorySourceException rse) {
-            String message = rse.getMessage();
-            assertEquals("The url property is required but has no value", message);
-        }
-    }
-
-    @Test
-    public void shouldReturnAJackrabbitRepositoryConnectionUsingAllInjectedFactories() throws Exception {
-        JackrabbitRepositorySource jackrabbitRepositorySource = setupJackrabbitRepositorySource();
-        
-        jackrabbitRepositorySource.getConnection();
-        
-        verify(mockedRepositoryFactory).createRepository("http://some.valid.url");
-        verify(mockedCredentialsFactory).createCredentials("scott", "tiger");
-    }
-
-    @Test
-    public void shouldAllowMultipleConnectionsToBeOpenAtTheSameTime() throws Exception {
-        JackrabbitRepositorySource jackrabbitRepositorySource = setupJackrabbitRepositorySource();
-        
-        List<RepositoryConnection> connections = new ArrayList<RepositoryConnection>();
-        try {
-            for (int i = 0; i != 10; ++i) {
-                RepositoryConnection conn = jackrabbitRepositorySource.getConnection();
-                assertThat(conn, is(notNullValue()));
-                connections.add(conn);
-            }
-        } finally {
-            // Close all open connections ...
-            for (RepositoryConnection conn : connections) {
-                if (conn != null) {
-                    try {
-                        conn.close();
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-            }
-        }
-    }
-    
-    
-    @Test
-    public void shouldHaveDefaultRetryLimit() {
-        assertThat(repositorySource.getRetryLimit(), is(JcrRepositorySource.DEFAULT_RETRY_LIMIT));
-    }
-    
-    @Test
-    public void shouldAllowAnyNotNegativeIntegerForRetryLimit() throws Exception {
-        repositorySource.setRetryLimit(10);
-
-        assertEquals(10, repositorySource.getRetryLimit());
-    }
-
-    @Test
-    public void shouldAvoidNegativeValuesForRetryLimit() throws Exception {
-        repositorySource.setRetryLimit(-4);
-
-        assertThat(repositorySource.getRetryLimit(), equalTo(0));
-    }
-
-    @Test
-    public void shouldAllowSettingURL() {
-        repositorySource.setUrl("Something");
-        assertThat(repositorySource.getUrl(), is("Something"));
-        
-        repositorySource.setUrl("another url");
-        assertThat(repositorySource.getUrl(), is("another url"));
-    }
-    
-    @Test
-    public void shouldAllowSettingURLToNull() {
-        repositorySource.setUrl("some url");
-        repositorySource.setUrl(null);
-        assertThat(repositorySource.getUrl(), is(nullValue()));
-    }
-    
-    @Test
-    public void shouldReturnNonNullCapabilities() {
-        assertThat(repositorySource.getCapabilities(), is(notNullValue()));
-    }
-
-    @Test
-    public void shouldSupportSameNameSiblings() throws Exception {
-        RepositorySourceCapabilities sourceCapabilities = repositorySource.getCapabilities();
-
-        assertThat(sourceCapabilities.supportsSameNameSiblings(), is(true));
-    }
-    
-    @Test
-    public void shouldSupportUpdates() throws Exception {
-        RepositorySourceCapabilities sourceCapabilities = repositorySource.getCapabilities();
-
-        assertThat(sourceCapabilities.supportsUpdates(), is(true));
-    }
-
-    @Test
-    public void shouldNotSupportEvents() throws Exception {
-        RepositorySourceCapabilities sourceCapabilities = repositorySource.getCapabilities();
-
-        assertFalse(sourceCapabilities.supportsEvents());
-    }
-
-    @Test
-    public void shouldSupportWorkspaceCreation() throws Exception {
-        RepositorySourceCapabilities sourceCapabilities = repositorySource.getCapabilities();
-
-        assertTrue(sourceCapabilities.supportsCreatingWorkspaces());
-    }
-
-    @Test
-    public void shouldSupportReferenceCreation() throws Exception {
-        RepositorySourceCapabilities sourceCapabilities = repositorySource.getCapabilities();
-
-        assertTrue(sourceCapabilities.supportsReferences());
-    }
-
-    private JackrabbitRepositorySource setupJackrabbitRepositorySource() {
-        final JackrabbitRepositorySource jackrabbitRepositorySource = new JackrabbitRepositorySource() {
-    
-            @Override
-            protected RepositoryFactory getRepositoryFactory() {
-                return mockedRepositoryFactory;
-            }
-    
-            @Override
-            protected CredentialsFactory getCredentialsFactory() {
-                return mockedCredentialsFactory;
-            }
-            
-        };
-    
-        jackrabbitRepositorySource.setUrl("http://some.valid.url");
-        jackrabbitRepositorySource.setUsername("scott");
-        jackrabbitRepositorySource.setPassword("tiger");
-        
-        final ExecutionContext context = new ExecutionContext();
-        jackrabbitRepositorySource.initialize(new RepositoryContext(){
-
-            public ExecutionContext getExecutionContext() {
-                return context;
-            }
-
-            public org.modeshape.graph.connector.RepositoryConnectionFactory getRepositoryConnectionFactory() {
-                return new org.modeshape.graph.connector.RepositoryConnectionFactory(){
-
-                    public RepositoryConnection createConnection( String sourceName ) throws RepositorySourceException {
-                        return jackrabbitRepositorySource.getConnection();
-                    }};
-            }
-
-            public Observer getObserver() {
-                return null;
-            }
-
-            public Subgraph getConfiguration( int depth ) {
-                return null;
-            }});
-        
-        return jackrabbitRepositorySource;
-    }
-
-    private void checkDescriptionAnnotation( JackrabbitRepositorySource jackrabbitRepositorySource,
-                                             String fieldName ) throws NoSuchFieldException {
-        Field field = getField(jackrabbitRepositorySource, fieldName);
-
-        Description descriptionAnnotation = field.getAnnotation(Description.class);
-        String annotationName = "Description";
-
-        assertNotNull(descriptionAnnotation);
-        assertEquals(JcrConnectorI18n.class, descriptionAnnotation.i18n());
-        assertEquals(fieldName + "Property" + annotationName, descriptionAnnotation.value());
-    }
-
-    private void checkLabelAnnotation( JackrabbitRepositorySource jackrabbitRepositorySource,
-                                       String fieldName ) throws NoSuchFieldException {
-        Field field = getField(jackrabbitRepositorySource, fieldName);
-
-        Label labelAnnotation = field.getAnnotation(Label.class);
-
-        assertNotNull(labelAnnotation);
-        assertEquals(JcrConnectorI18n.class, labelAnnotation.i18n());
-        assertEquals(fieldName + "PropertyLabel", labelAnnotation.value());
-    }
-
-    private void checkCategoryAnnotation( JackrabbitRepositorySource jackrabbitRepositorySource,
-                                          String fieldName ) throws NoSuchFieldException {
-        Field field = getField(jackrabbitRepositorySource, fieldName);
-
-        Category categoryAnnotation = field.getAnnotation(Category.class);
-
-        assertNotNull(categoryAnnotation);
-        assertEquals(JcrConnectorI18n.class, categoryAnnotation.i18n());
-        assertEquals(fieldName + "PropertyCategory", categoryAnnotation.value());
-    }
-
-    private Object getFieldValue( JackrabbitRepositorySource jackrabbitRepositorySource,
-                                  String fieldName ) throws NoSuchFieldException, IllegalAccessException {
-        Field repositoryContext = getField(jackrabbitRepositorySource, fieldName);
-        repositoryContext.setAccessible(true);
-        Object repositoryContextValue = repositoryContext.get(jackrabbitRepositorySource);
-        return repositoryContextValue;
-    }
-
-    private Field getField( JackrabbitRepositorySource jackrabbitRepositorySource,
-                            String fieldName ) throws NoSuchFieldException {
-        Field repositoryContext = jackrabbitRepositorySource.getClass().getDeclaredField(fieldName);
-        return repositoryContext;
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit-it/src/main/java/com/sourcesense/stone/extensions/it/Modeshape2JackrabbitConnectorIT.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit-it/src/main/java/com/sourcesense/stone/extensions/it/Modeshape2JackrabbitConnectorIT.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,67 +0,0 @@
-package com.sourcesense.stone.extensions.it;
-
-import javax.jcr.Node;
-import javax.jcr.Session;
-import javax.jcr.Workspace;
-import org.modeshape.jcr.JcrConfiguration;
-import org.modeshape.jcr.JcrEngine;
-import org.modeshape.jcr.JcrRepository;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class Modeshape2JackrabbitConnectorIT {
-
-    private final Logger logger = LoggerFactory.getLogger(this.getClass());
-
-    private JcrEngine engine;
-
-    public static void main( String[] args ) {
-        Modeshape2JackrabbitConnectorIT modeshape2JackrabbitConnectorIT = new Modeshape2JackrabbitConnectorIT();
-        modeshape2JackrabbitConnectorIT.setup();
-        modeshape2JackrabbitConnectorIT.runTests();
-        modeshape2JackrabbitConnectorIT.tearDown();
-    }
-
-    private void setup() {
-        logger.info("Setting up");
-        JcrConfiguration configuration = new JcrConfiguration();
-        try {
-            configuration.loadFrom(this.getClass().getResource("modeshape-repository-jackrabbit.xml"));
-            logger.info("Configuration loaded");
-            this.engine = configuration.build();
-            logger.info("Engine built");
-            this.engine.start();
-            logger.info("Engine started");
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void runTests() {
-        logger.info("Starting tests");
-        try {
-            JcrRepository repository = engine.getRepository("test");
-            logger.info("Got repository test");
-            Session session = repository.login();
-            logger.info("Got valid session");
-            Node rootNode = session.getRootNode();
-            logger.info("Got root node: " + rootNode.getPath());
-            Workspace workspace = session.getWorkspace();
-            logger.info("Current workspace: " + workspace.getName());
-            rootNode.addNode("childNode", "nt:unstructured");
-            session.save();
-            session.logout();
-            logger.info("Logged out");
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void tearDown() {
-        logger.info("Tearing down");
-        if (null != engine) {
-            engine.shutdown();
-        }
-    }
-
-}
--- modeshape-stone/sandbox/extensions/modeshape-connector-jackrabbit-it/src/main/java/com/sourcesense/stone/extensions/it/SPI2DAVJackrabbit.java	2011-04-21 12:47:09.000000000 +0200
+++ modeshape/sandbox/extensions/modeshape-connector-jackrabbit-it/src/main/java/com/sourcesense/stone/extensions/it/SPI2DAVJackrabbit.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,79 +0,0 @@
-package com.sourcesense.stone.extensions.it;
-
-import javax.jcr.LoginException;
-import javax.jcr.Node;
-import javax.jcr.Repository;
-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import org.apache.jackrabbit.jcr2spi.RepositoryImpl;
-import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
-import org.apache.jackrabbit.jcr2spi.config.RepositoryConfig;
-import org.apache.jackrabbit.spi.IdFactory;
-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.spi.RepositoryService;
-import org.apache.jackrabbit.spi.commons.identifier.IdFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
-import org.apache.jackrabbit.spi2dav.RepositoryServiceImpl;
-
-public class SPI2DAVJackrabbit {
-
-    public static void main( String[] args ) {
-        SPI2DAVJackrabbit spi2davJackrabbit = new SPI2DAVJackrabbit();
-        try {
-            spi2davJackrabbit.connect();
-        } catch (LoginException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (RepositoryException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-    }
-
-    private void connect() throws LoginException, RepositoryException {
-        String url = "http://localhost:8080/server";
-
-        final IdFactory idFactory = IdFactoryImpl.getInstance();
-        final NameFactory nFactory = NameFactoryImpl.getInstance();
-        final PathFactory pFactory = PathFactoryImpl.getInstance();
-        final QValueFactory vFactory = QValueFactoryImpl.getInstance();
-        final RepositoryServiceImpl webdavRepoService = new RepositoryServiceImpl(url, idFactory, nFactory, pFactory, vFactory);
-
-        RepositoryConfig config = new RepositoryConfig() {
-            public RepositoryService getRepositoryService() {
-                return webdavRepoService;
-            }
-
-            public CacheBehaviour getCacheBehaviour() {
-                return CacheBehaviour.INVALIDATE;
-            }
-
-            public int getItemCacheSize() {
-                return 10000;
-            }
-
-            public int getPollTimeout() {
-                return 0;
-            }
-        };
-
-        Repository repository = RepositoryImpl.create(config);
-        Session session = repository.login();
-        
-        Node rootNode = session.getRootNode();
-        rootNode.addNode("system");
-        session.save();
-        
-        session.logout();
-        
-        
-        session = repository.login();
-        Node node = session.getNode(session.getRootNode().getPath()+"myNode");
-        System.out.println("myNode: " + node.toString());
-        session.logout();
-    }
-}
