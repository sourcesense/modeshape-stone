<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ ModeShape (http://www.modeshape.org)
  ~
  ~ See the COPYRIGHT.txt file distributed with this work for information
  ~ regarding copyright ownership.  Some portions may be licensed
  ~ to Red Hat, Inc. under one or more contributor license agreements.
  ~ See the AUTHORS.txt file in the distribution for a full listing of 
  ~ individual contributors.
  ~
  ~ ModeShape is free software. Unless otherwise indicated, all code in ModeShape
  ~ is licensed to you under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ ModeShape is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"	[
<!ENTITY % CustomDTD SYSTEM "../../custom.dtd">
%CustomDTD;
]>
<chapter id="testing">
  <title>Testing</title>
  <para>
  	The ModeShape project uses automated testing to verify that the software is doing what it's supposed to
		and not doing what it shouldn't do.  These automated tests are run continuously and also act as regression tests,
		ensuring that we know if any problems we find and fix reappear later.  All of our tests are executed as part of
		our <link linkend="maven">Maven</link> build process, and the entire build process (including the tests)
		is automatically run using <link linkend="hudson">Hudson</link> continuous integration system.
  </para>
  <sect1 id="unit-tests">
    <title>Unit tests</title>
    <para>
    	<emphasis role="strong">Unit tests</emphasis> verify the behavior of a single class (or small set of classes) in isolation
			from other classes.
 			We use the JUnit 4.4 testing framework, which has significant improvements over earlier versions and makes
			it very easy to quickly write unit tests with little extra code.  We also frequently use the Mockito library
			to help create mock implementations of other classes that are not under test but are used in the tests.
    </para>
  	<para>
			Unit tests should generally run quickly and should not require large assemblies of components.  Additionally,
			they may rely upon the file resources included in the project, but these tests should require no external resources
			(like databases or servers).  Note that our unit tests are run during the "test" phase of the standard
			<ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Maven lifecycle</ulink>.
			This means that they are executed against the raw .class files created during compilation.
		</para>
		<para>
			Developers are expected to run all of the ModeShape unit tests in their local environment before committing changes to SVN.
			So, if you're a developer and you've made changes to your local copy of the source, you can run those tests that are
			related to your changes using your IDE or with Maven (or any other mechanism).  But before you commit your changes, 
			you are expected to run a full Maven build using <code>mvn clean install</code> (in the "trunk/" directory).
			Please do <emphasis>not</emphasis> rely upon continuous integration to run all of the tests for you - the CI
			system is there to catch the occasional mistakes and to also run the <link linkend="integration-tests">integration tests</link>.
    </para>
  </sect1>
  <sect1 id="integration-tests">
    <title>Integration tests</title>
    <para>
    	While <link linkend="unit-tests">unit tests</link> test individual classes in (relative) isolation, the purpose of
			<emphasis role="strong">integration tests</emphasis> are to verify that assemblies of classes and components are
			behaving correctly.  These assemblies are often the same ones that end users will actually use.  In fact,
			integration tests are executed during the "integration-test" phase of the standard
			<ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Maven lifecycle</ulink>,
			meaning they are executed against the packaged JARs and artifacts of the project.
    </para>
		<para>
			Integration tests also use the JUnit 4.4 framework, so they are again easy to write and follow the same pattern
			as unit tests. However, because they're working with larger assemblies of components, they often will take longer
			to set up, longer to run, and longer to tear down.  They also may require initializing "external resources", like
			databases or servers.  
		</para>
		<para>
			Note, that while external resources may be required, care should be taken to minimize these dependencies and to
			ensure that most (if not all) integration tests may be run by anyone who downloads the source code.  This means
			that these external resources should be available and set up within the tests.  For example, use in-memory databases
			where possible.  Or, if a database is required, use an open-source database (e.g., MySQL or PostgreSQL).  And when
			these external resources are not available, it should be obvious from the test class names and/or test method names 
			that it involved an external resource (e.g., "<code>MySqlConnectorIntegrationTest.shouldFindNodeStoredInDatabase()</code>").
		</para>
  </sect1>
  <sect1 id="writing-tests">
    <title>Writing tests</title>
		<para>
			As mentioned in <link linkend="methodology">the introduction</link>, the ModeShape project doesn't follow any one methodology
			or process.  Instead, we simply have a goal that as much code as possible is tested to ensure it behaves as expected.
			Do we expect 100% of the code is covered by automated tests?  No, but we do want to test as much as we can.
			Maybe a simple JavaBean class doesn't need many tests, but any class with non-trivial logic should be tested.
		</para>
		<para>
			We do encourage writing tests either before or while you write the code.  Again, we're not blindly following a methodology.
			Instead, there's a very practical reason: writing the tests early on helps you write classes that are testable.  
			If you wait until after the class (or classes) are done, you'll probably find that it's not easy to test all
			of the logic (especially the complicated logic).
		</para>
		<para>
			Another suggestion is to write tests so that they specify and verify the behavior that is expected from a class or component.
			One challenge developers often have is knowing what they should even test and what the tests should look like.
			This is where <emphasis role="strong"><ulink url="http://behaviour-driven.org/">Behavior-driven development (BDD)</ulink></emphasis>
			helps out.  If you think about what a class' behaviors are supposed to be (e.g., requirements), simply capture those
			requirements as test methods (with no implementations).  For example, a test class for sequencer 
			implementation might have a test method	<code>shouldNotThrowAnErrorWhenTheSuppliedStreamIsNull() { }</code>.  Then, after you enumerate
			all the requirements you can think of, go back and start implementing the test methods.
		</para>
		<para>
			If you look at the existing test cases, you'll find that the names of the unit and integration tests in ModeShape 
			follow a naming style, where the test method names are readable sentences.  Actually, we try to name the test methods
			<emphasis>and</emphasis> the test classes such that they form a concisely-worded requirement.  For example,
		</para>
		<programlisting>InMemorySequencerTest.shouldNotThrowAnErrorWhenTheSuppliedStreamIsNull()</programlisting>
		<para>
			is easily translated into a readable requirement:
		</para>
		<programlisting>InMemorySequencer should not throw an error when the supplied stream is null.</programlisting>
		<para>
			In fact, at some point in the future, we'd like to process the source to automatically generate a list of the behavior specifications
			that are asserted by the tests.
		</para>
		<para>
			But for now, we write tests - a lot of them.  And by following a few simple conventions and practices, we're able
			to do it quickly and in a way that makes it easy to understand what the code is supposed to do (or not do).
		</para>
	</sect1>
  <sect1 id="tck-tests">
    <title>Technology Compatibility Kit (TCK) tests</title>
    <para>
    	Many Java specifications provide TCK test suites that can be used to check or verify that an implementation
      correctly implements the API or SPI defined by the specification.  These TCK tests vary by technology, but
			<ulink url="&JSR283;">JSR-283</ulink> does provide TCK tests that ensure that a JCR repository implementation 
			exhibits the correct and expected behavior.
	  </para>
		<para>ModeShape now implements all of the required JCR 2.0 features:
	    <itemizedlist>
	      <listitem><para>repository acquisition</para></listitem>
	      <listitem><para>authentication</para></listitem>
	      <listitem><para>reading/navigating</para></listitem>
	      <listitem><para>query</para></listitem>
	      <listitem><para>export</para></listitem>
	      <listitem><para>node type discovery</para></listitem>
	      <listitem><para>permissions and capability checking</para></listitem>
	    </itemizedlist>
			and implements most of the optional JCR 2.0 features:
	    <itemizedlist>
	      <listitem><para>writing</para></listitem>
	      <listitem><para>import</para></listitem>
	      <listitem><para>observation</para></listitem>
	      <listitem><para>workspace management</para></listitem>
	      <listitem><para>versioning</para></listitem>
	      <listitem><para>locking</para></listitem>
	      <listitem><para>node type management</para></listitem>
	      <listitem><para>same-name siblings</para></listitem>
	      <listitem><para>orderable child nodes</para></listitem>
	      <listitem><para>shareable nodes</para></listitem>
	    </itemizedlist>
	    ModeShape supports the following query languages:
	    <itemizedlist>
	      <listitem><para><link linkend="jcr-sql2-query-language">JCR-SQL2</link> defined in <ulink url="&JSR283;">JSR-283</ulink></para></listitem>
	      <listitem><para><link linkend="jcr-qom-query-language">JCR-QOM</link> defined in <ulink url="&JSR283;">JSR-283</ulink></para></listitem>
	      <listitem><para><link linkend="jcr-xpath-query-language">XPath</link> defined in <ulink url="&JSR170;">JSR-170</ulink></para></listitem>
	      <listitem><para><link linkend="jcr-sql-query-language">JCR-SQL</link> defined in <ulink url="&JSR170;">JSR-170</ulink></para></listitem>
	      <listitem><para><link linkend="fulltext-search-query-language">Full-text search</link> that is similar to a search engine</para></listitem>
	    </itemizedlist>
		</para>
		<para>
			The ModeShape project also frequently runs the JCR TCK unit tests from the reference implementation.  (These tests are not
			the official TCK, but are used within the official TCK.)  Most of these unit tests are run in the <code>modeshape-jcr</code>
			module against the <link linkend="in-memory-connector">in-memory repository</link> to ensure our JCR implementation behaves
			correctly, and the same tests are run in the <code>modeshape-integration-tests</code> module against a variety of connectors
			to ensure they're implemented correctly. The <code>modeshape-jcr-tck</code> module runs <emphasis>all</emphasis> of these
			TCK unit tests, and currently there are only a handful of failures due to known issues (see the
			<link linkend="jcr-spec-support">JCR specification support</link> section for details).
		</para>
		<para>
		  The ModeShape project has not yet been certified to be fully-compliant with the JCR 2.0 specification, but does plan
		  on attaining this certification in the very near future.
		</para>
  </sect1>
</chapter>
